{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1","program":"/home/alvorithm/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","rust_decimal","--edition=2018","/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/lib.rs","--json=diagnostic-rendered-ansi,artifacts,future-incompat","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","--cfg","feature=\"default\"","--cfg","feature=\"serde\"","--cfg","feature=\"std\"","-C","metadata=e848c75b6b6684d7","-C","extra-filename=-e848c75b6b6684d7","--out-dir","/home/alvorithm/Documents/FOCUS_SAULS/smhardtwork_university/blockchain_fullstack/Rustlanging/start_rust/conditionals_match/target/rls/debug/deps","-L","dependency=/home/alvorithm/Documents/FOCUS_SAULS/smhardtwork_university/blockchain_fullstack/Rustlanging/start_rust/conditionals_match/target/rls/debug/deps","--extern","arrayvec=/home/alvorithm/Documents/FOCUS_SAULS/smhardtwork_university/blockchain_fullstack/Rustlanging/start_rust/conditionals_match/target/rls/debug/deps/libarrayvec-7f9d68318296f4ee.rmeta","--extern","num_traits=/home/alvorithm/Documents/FOCUS_SAULS/smhardtwork_university/blockchain_fullstack/Rustlanging/start_rust/conditionals_match/target/rls/debug/deps/libnum_traits-d742e05758b1f589.rmeta","--extern","serde=/home/alvorithm/Documents/FOCUS_SAULS/smhardtwork_university/blockchain_fullstack/Rustlanging/start_rust/conditionals_match/target/rls/debug/deps/libserde-ed80efe0bb621cfd.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/home/alvorithm/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/home/alvorithm/Documents/FOCUS_SAULS/smhardtwork_university/blockchain_fullstack/Rustlanging/start_rust/conditionals_match/target/rls/debug/deps/librust_decimal-e848c75b6b6684d7.rmeta"},"prelude":{"crate_id":{"name":"rust_decimal","disambiguator":[15831129068927340056,0]},"crate_root":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src","external_crates":[{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[14788966508543342302,0]}},{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","num":2,"id":{"name":"core","disambiguator":[2825088610194081445,0]}},{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[9481142260376939403,0]}},{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[16420834686343379425,0]}},{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[11097033969885139948,0]}},{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[6800150773471260640,0]}},{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[9424233180753397496,0]}},{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[4493421558680613340,0]}},{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[10587786945246582611,0]}},{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[6037489587312533517,0]}},{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/lib.rs","num":11,"id":{"name":"std_detect","disambiguator":[12999623613951624675,0]}},{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/lib.rs","num":12,"id":{"name":"rustc_demangle","disambiguator":[15285592788019233460,0]}},{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/lib.rs","num":13,"id":{"name":"addr2line","disambiguator":[7690318462147983057,0]}},{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/lib.rs","num":14,"id":{"name":"gimli","disambiguator":[16937637772373355212,0]}},{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/lib.rs","num":15,"id":{"name":"object","disambiguator":[8216859446519220865,0]}},{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/lib.rs","num":16,"id":{"name":"memchr","disambiguator":[6387052066414425180,0]}},{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/lib.rs","num":17,"id":{"name":"miniz_oxide","disambiguator":[879344915155370202,0]}},{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/lib.rs","num":18,"id":{"name":"adler","disambiguator":[12947071141408240460,0]}},{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/lib.rs","num":19,"id":{"name":"panic_unwind","disambiguator":[12545025351940724261,0]}},{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","num":20,"id":{"name":"num_traits","disambiguator":[7348840299469362310,0]}},{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/str.rs","num":21,"id":{"name":"arrayvec","disambiguator":[17570390050859790690,0]}},{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/serde.rs","num":22,"id":{"name":"serde","disambiguator":[10938183733497316865,0]}}],"span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/lib.rs","byte_start":0,"byte_end":1797,"line_start":1,"line_end":69,"column_start":1,"column_end":53}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":1034},"span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/lib.rs","byte_start":1107,"byte_end":1114,"line_start":49,"line_end":49,"column_start":19,"column_end":26},"alias_span":null,"name":"Decimal","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1042},"span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/lib.rs","byte_start":1116,"byte_end":1132,"line_start":49,"line_end":49,"column_start":28,"column_end":44},"alias_span":null,"name":"RoundingStrategy","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1168},"span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/lib.rs","byte_start":1150,"byte_end":1155,"line_start":50,"line_end":50,"column_start":16,"column_end":21},"alias_span":null,"name":"Error","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1034},"span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/lib.rs","byte_start":1416,"byte_end":1423,"line_start":58,"line_end":58,"column_start":21,"column_end":28},"alias_span":null,"name":"Decimal","value":"","parent":{"krate":0,"index":990}},{"kind":"Use","ref_id":{"krate":0,"index":1042},"span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/lib.rs","byte_start":1425,"byte_end":1441,"line_start":58,"line_end":58,"column_start":30,"column_end":46},"alias_span":null,"name":"RoundingStrategy","value":"","parent":{"krate":0,"index":990}},{"kind":"Use","ref_id":{"krate":2,"index":12188},"span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/lib.rs","byte_start":1467,"byte_end":1474,"line_start":59,"line_end":59,"column_start":24,"column_end":31},"alias_span":null,"name":"FromStr","value":"","parent":{"krate":0,"index":990}},{"kind":"Use","ref_id":{"krate":20,"index":316},"span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/lib.rs","byte_start":1501,"byte_end":1514,"line_start":60,"line_end":60,"column_start":26,"column_end":39},"alias_span":null,"name":"FromPrimitive","value":"","parent":{"krate":0,"index":990}},{"kind":"Use","ref_id":{"krate":20,"index":455},"span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/lib.rs","byte_start":1516,"byte_end":1519,"line_start":60,"line_end":60,"column_start":41,"column_end":44},"alias_span":null,"name":"One","value":"","parent":{"krate":0,"index":990}},{"kind":"Use","ref_id":{"krate":20,"index":765},"span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/lib.rs","byte_start":1521,"byte_end":1527,"line_start":60,"line_end":60,"column_start":46,"column_end":52},"alias_span":null,"name":"Signed","value":"","parent":{"krate":0,"index":990}},{"kind":"Use","ref_id":{"krate":20,"index":290},"span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/lib.rs","byte_start":1529,"byte_end":1540,"line_start":60,"line_end":60,"column_start":54,"column_end":65},"alias_span":null,"name":"ToPrimitive","value":"","parent":{"krate":0,"index":990}},{"kind":"Use","ref_id":{"krate":20,"index":445},"span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/lib.rs","byte_start":1542,"byte_end":1546,"line_start":60,"line_end":60,"column_start":67,"column_end":71},"alias_span":null,"name":"Zero","value":"","parent":{"krate":0,"index":990}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/lib.rs","byte_start":0,"byte_end":1797,"line_start":1,"line_end":69,"column_start":1,"column_end":53},"name":"","qualname":"::","value":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":27},{"krate":0,"index":360},{"krate":0,"index":381},{"krate":0,"index":689},{"krate":0,"index":840},{"krate":0,"index":932},{"krate":0,"index":980},{"krate":0,"index":981},{"krate":0,"index":984},{"krate":0,"index":987},{"krate":0,"index":990},{"krate":0,"index":1017}],"decl_id":null,"docs":"A Decimal number implementation written in pure Rust suitable for financial calculations that require significant integral and fractional digits with no round-off errors.","sig":null,"attributes":[{"value":"forbid(unsafe_code)","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/lib.rs","byte_start":67,"byte_end":90,"line_start":2,"line_end":2,"column_start":1,"column_end":24}}]},{"kind":"Struct","id":{"krate":0,"index":1019},"span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":6290,"byte_end":6305,"line_start":85,"line_end":85,"column_start":12,"column_end":27},"name":"UnpackedDecimal","qualname":"::decimal::UnpackedDecimal","value":"UnpackedDecimal { negative, scale, hi, mid, lo }","parent":null,"children":[{"krate":0,"index":1020},{"krate":0,"index":1021},{"krate":0,"index":1022},{"krate":0,"index":1023},{"krate":0,"index":1024}],"decl_id":null,"docs":" `UnpackedDecimal` contains unpacked representation of `Decimal` where each component\n of decimal-format stored in it's own field\n","sig":null,"attributes":[{"value":"/ `UnpackedDecimal` contains unpacked representation of `Decimal` where each component","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":6102,"byte_end":6190,"line_start":82,"line_end":82,"column_start":1,"column_end":89}},{"value":"/ of decimal-format stored in it's own field","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":6191,"byte_end":6237,"line_start":83,"line_end":83,"column_start":1,"column_end":47}}]},{"kind":"Field","id":{"krate":0,"index":1020},"span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":6316,"byte_end":6324,"line_start":86,"line_end":86,"column_start":9,"column_end":17},"name":"negative","qualname":"::decimal::UnpackedDecimal::negative","value":"bool","parent":{"krate":0,"index":1019},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1021},"span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":6340,"byte_end":6345,"line_start":87,"line_end":87,"column_start":9,"column_end":14},"name":"scale","qualname":"::decimal::UnpackedDecimal::scale","value":"u32","parent":{"krate":0,"index":1019},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1022},"span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":6360,"byte_end":6362,"line_start":88,"line_end":88,"column_start":9,"column_end":11},"name":"hi","qualname":"::decimal::UnpackedDecimal::hi","value":"u32","parent":{"krate":0,"index":1019},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1023},"span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":6377,"byte_end":6380,"line_start":89,"line_end":89,"column_start":9,"column_end":12},"name":"mid","qualname":"::decimal::UnpackedDecimal::mid","value":"u32","parent":{"krate":0,"index":1019},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1024},"span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":6395,"byte_end":6397,"line_start":90,"line_end":90,"column_start":9,"column_end":11},"name":"lo","qualname":"::decimal::UnpackedDecimal::lo","value":"u32","parent":{"krate":0,"index":1019},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1034},"span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":6983,"byte_end":6990,"line_start":104,"line_end":104,"column_start":12,"column_end":19},"name":"Decimal","qualname":"::decimal::Decimal","value":"Decimal {  }","parent":null,"children":[{"krate":0,"index":1035},{"krate":0,"index":1036},{"krate":0,"index":1037},{"krate":0,"index":1038}],"decl_id":null,"docs":" `Decimal` represents a 128 bit representation of a fixed-precision decimal number.\n The finite set of values of type `Decimal` are of the form m / 10<sup>e</sup>,\n where m is an integer such that -2<sup>96</sup> < m < 2<sup>96</sup>, and e is an integer\n between 0 and 28 inclusive.\n","sig":null,"attributes":[{"value":"/ `Decimal` represents a 128 bit representation of a fixed-precision decimal number.","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":6407,"byte_end":6493,"line_start":93,"line_end":93,"column_start":1,"column_end":87}},{"value":"/ The finite set of values of type `Decimal` are of the form m / 10<sup>e</sup>,","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":6494,"byte_end":6576,"line_start":94,"line_end":94,"column_start":1,"column_end":83}},{"value":"/ where m is an integer such that -2<sup>96</sup> < m < 2<sup>96</sup>, and e is an integer","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":6577,"byte_end":6670,"line_start":95,"line_end":95,"column_start":1,"column_end":94}},{"value":"/ between 0 and 28 inclusive.","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":6671,"byte_end":6702,"line_start":96,"line_end":96,"column_start":1,"column_end":32}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1043},"span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":7764,"byte_end":7783,"line_start":125,"line_end":125,"column_start":5,"column_end":24},"name":"MidpointNearestEven","qualname":"::decimal::RoundingStrategy::MidpointNearestEven","value":"RoundingStrategy::MidpointNearestEven","parent":{"krate":0,"index":1042},"children":[],"decl_id":null,"docs":" When a number is halfway between two others, it is rounded toward the nearest even number.\n Also known as \"Bankers Rounding\".\n e.g.\n 6.5 -> 6, 7.5 -> 8\n","sig":null,"attributes":[{"value":"/ When a number is halfway between two others, it is rounded toward the nearest even number.","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":7583,"byte_end":7677,"line_start":121,"line_end":121,"column_start":5,"column_end":99}},{"value":"/ Also known as \"Bankers Rounding\".","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":7682,"byte_end":7719,"line_start":122,"line_end":122,"column_start":5,"column_end":42}},{"value":"/ e.g.","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":7724,"byte_end":7732,"line_start":123,"line_end":123,"column_start":5,"column_end":13}},{"value":"/ 6.5 -> 6, 7.5 -> 8","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":7737,"byte_end":7759,"line_start":124,"line_end":124,"column_start":5,"column_end":27}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1045},"span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":7950,"byte_end":7970,"line_start":128,"line_end":128,"column_start":5,"column_end":25},"name":"MidpointAwayFromZero","qualname":"::decimal::RoundingStrategy::MidpointAwayFromZero","value":"RoundingStrategy::MidpointAwayFromZero","parent":{"krate":0,"index":1042},"children":[],"decl_id":null,"docs":" When a number is halfway between two others, it is rounded toward the nearest number that\n is away from zero. e.g. 6.4 -> 6, 6.5 -> 7, -6.5 -> -7\n","sig":null,"attributes":[{"value":"/ When a number is halfway between two others, it is rounded toward the nearest number that","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":7789,"byte_end":7882,"line_start":126,"line_end":126,"column_start":5,"column_end":98}},{"value":"/ is away from zero. e.g. 6.4 -> 6, 6.5 -> 7, -6.5 -> -7","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":7887,"byte_end":7945,"line_start":127,"line_end":127,"column_start":5,"column_end":63}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1047},"span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":8134,"byte_end":8152,"line_start":131,"line_end":131,"column_start":5,"column_end":23},"name":"MidpointTowardZero","qualname":"::decimal::RoundingStrategy::MidpointTowardZero","value":"RoundingStrategy::MidpointTowardZero","parent":{"krate":0,"index":1042},"children":[],"decl_id":null,"docs":" When a number is halfway between two others, it is rounded toward the nearest number that\n is toward zero. e.g. 6.4 -> 6, 6.5 -> 6, -6.5 -> -6\n","sig":null,"attributes":[{"value":"/ When a number is halfway between two others, it is rounded toward the nearest number that","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":7976,"byte_end":8069,"line_start":129,"line_end":129,"column_start":5,"column_end":98}},{"value":"/ is toward zero. e.g. 6.4 -> 6, 6.5 -> 6, -6.5 -> -6","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":8074,"byte_end":8129,"line_start":130,"line_end":130,"column_start":5,"column_end":60}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1049},"span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":8234,"byte_end":8240,"line_start":133,"line_end":133,"column_start":5,"column_end":11},"name":"ToZero","qualname":"::decimal::RoundingStrategy::ToZero","value":"RoundingStrategy::ToZero","parent":{"krate":0,"index":1042},"children":[],"decl_id":null,"docs":" The number is always rounded toward zero. e.g. -6.8 -> -6, 6.8 -> 6\n","sig":null,"attributes":[{"value":"/ The number is always rounded toward zero. e.g. -6.8 -> -6, 6.8 -> 6","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":8158,"byte_end":8229,"line_start":132,"line_end":132,"column_start":5,"column_end":76}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1051},"span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":8325,"byte_end":8337,"line_start":135,"line_end":135,"column_start":5,"column_end":17},"name":"AwayFromZero","qualname":"::decimal::RoundingStrategy::AwayFromZero","value":"RoundingStrategy::AwayFromZero","parent":{"krate":0,"index":1042},"children":[],"decl_id":null,"docs":" The number is always rounded away from zero. e.g. -6.8 -> -7, 6.8 -> 7\n","sig":null,"attributes":[{"value":"/ The number is always rounded away from zero. e.g. -6.8 -> -7, 6.8 -> 7","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":8246,"byte_end":8320,"line_start":134,"line_end":134,"column_start":5,"column_end":79}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1053},"span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":8433,"byte_end":8451,"line_start":137,"line_end":137,"column_start":5,"column_end":23},"name":"ToNegativeInfinity","qualname":"::decimal::RoundingStrategy::ToNegativeInfinity","value":"RoundingStrategy::ToNegativeInfinity","parent":{"krate":0,"index":1042},"children":[],"decl_id":null,"docs":" The number is always rounded towards negative infinity. e.g. 6.8 -> 6, -6.8 -> -7\n","sig":null,"attributes":[{"value":"/ The number is always rounded towards negative infinity. e.g. 6.8 -> 6, -6.8 -> -7","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":8343,"byte_end":8428,"line_start":136,"line_end":136,"column_start":5,"column_end":90}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1055},"span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":8547,"byte_end":8565,"line_start":139,"line_end":139,"column_start":5,"column_end":23},"name":"ToPositiveInfinity","qualname":"::decimal::RoundingStrategy::ToPositiveInfinity","value":"RoundingStrategy::ToPositiveInfinity","parent":{"krate":0,"index":1042},"children":[],"decl_id":null,"docs":" The number is always rounded towards positive infinity. e.g. 6.8 -> 7, -6.8 -> -6\n","sig":null,"attributes":[{"value":"/ The number is always rounded towards positive infinity. e.g. 6.8 -> 7, -6.8 -> -6","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":8457,"byte_end":8542,"line_start":138,"line_end":138,"column_start":5,"column_end":90}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1057},"span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":8814,"byte_end":8829,"line_start":145,"line_end":145,"column_start":5,"column_end":20},"name":"BankersRounding","qualname":"::decimal::RoundingStrategy::BankersRounding","value":"RoundingStrategy::BankersRounding","parent":{"krate":0,"index":1042},"children":[],"decl_id":null,"docs":" When a number is halfway between two others, it is rounded toward the nearest even number.\n e.g.\n 6.5 -> 6, 7.5 -> 8\n","sig":null,"attributes":[{"value":"/ When a number is halfway between two others, it is rounded toward the nearest even number.","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":8572,"byte_end":8666,"line_start":141,"line_end":141,"column_start":5,"column_end":99}},{"value":"/ e.g.","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":8671,"byte_end":8679,"line_start":142,"line_end":142,"column_start":5,"column_end":13}},{"value":"/ 6.5 -> 6, 7.5 -> 8","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":8684,"byte_end":8706,"line_start":143,"line_end":143,"column_start":5,"column_end":27}},{"value":"deprecated(since = \"1.11.0\", note =\n\"Please use RoundingStrategy::MidpointNearestEven instead\")","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":8711,"byte_end":8809,"line_start":144,"line_end":144,"column_start":5,"column_end":103}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1059},"span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":9013,"byte_end":9024,"line_start":148,"line_end":148,"column_start":5,"column_end":16},"name":"RoundHalfUp","qualname":"::decimal::RoundingStrategy::RoundHalfUp","value":"RoundingStrategy::RoundHalfUp","parent":{"krate":0,"index":1042},"children":[],"decl_id":null,"docs":" Rounds up if the value >= 5, otherwise rounds down, e.g. 6.5 -> 7\n","sig":null,"attributes":[{"value":"/ Rounds up if the value >= 5, otherwise rounds down, e.g. 6.5 -> 7","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":8835,"byte_end":8904,"line_start":146,"line_end":146,"column_start":5,"column_end":74}},{"value":"deprecated(since = \"1.11.0\", note =\n\"Please use RoundingStrategy::MidpointAwayFromZero instead\")","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":8909,"byte_end":9008,"line_start":147,"line_end":147,"column_start":5,"column_end":104}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1061},"span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":9232,"byte_end":9245,"line_start":151,"line_end":151,"column_start":5,"column_end":18},"name":"RoundHalfDown","qualname":"::decimal::RoundingStrategy::RoundHalfDown","value":"RoundingStrategy::RoundHalfDown","parent":{"krate":0,"index":1042},"children":[],"decl_id":null,"docs":" Rounds down if the value =< 5, otherwise rounds up, e.g. 6.5 -> 6, 6.51 -> 7 1.4999999 -> 1\n","sig":null,"attributes":[{"value":"/ Rounds down if the value =< 5, otherwise rounds up, e.g. 6.5 -> 6, 6.51 -> 7 1.4999999 -> 1","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":9030,"byte_end":9125,"line_start":149,"line_end":149,"column_start":5,"column_end":100}},{"value":"deprecated(since = \"1.11.0\", note =\n\"Please use RoundingStrategy::MidpointTowardZero instead\")","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":9130,"byte_end":9227,"line_start":150,"line_end":150,"column_start":5,"column_end":102}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1063},"span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":9368,"byte_end":9377,"line_start":154,"line_end":154,"column_start":5,"column_end":14},"name":"RoundDown","qualname":"::decimal::RoundingStrategy::RoundDown","value":"RoundingStrategy::RoundDown","parent":{"krate":0,"index":1042},"children":[],"decl_id":null,"docs":" Always round down.\n","sig":null,"attributes":[{"value":"/ Always round down.","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":9251,"byte_end":9273,"line_start":152,"line_end":152,"column_start":5,"column_end":27}},{"value":"deprecated(since = \"1.11.0\", note =\n\"Please use RoundingStrategy::ToZero instead\")","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":9278,"byte_end":9363,"line_start":153,"line_end":153,"column_start":5,"column_end":90}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1065},"span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":9504,"byte_end":9511,"line_start":157,"line_end":157,"column_start":5,"column_end":12},"name":"RoundUp","qualname":"::decimal::RoundingStrategy::RoundUp","value":"RoundingStrategy::RoundUp","parent":{"krate":0,"index":1042},"children":[],"decl_id":null,"docs":" Always round up.\n","sig":null,"attributes":[{"value":"/ Always round up.","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":9383,"byte_end":9403,"line_start":155,"line_end":155,"column_start":5,"column_end":25}},{"value":"deprecated(since = \"1.11.0\", note =\n\"Please use RoundingStrategy::AwayFromZero instead\")","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":9408,"byte_end":9499,"line_start":156,"line_end":156,"column_start":5,"column_end":96}}]},{"kind":"Enum","id":{"krate":0,"index":1042},"span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":7560,"byte_end":7576,"line_start":120,"line_end":120,"column_start":10,"column_end":26},"name":"RoundingStrategy","qualname":"::decimal::RoundingStrategy","value":"pub enum RoundingStrategy {\n    MidpointNearestEven,\n    MidpointAwayFromZero,\n    MidpointTowardZero,\n    ToZero,\n    AwayFromZero,\n    ToNegativeInfinity,\n    ToPositiveInfinity,\n    BankersRounding,\n    RoundHalfUp,\n    RoundHalfDown,\n    RoundDown,\n    RoundUp,\n}","parent":null,"children":[{"krate":0,"index":1043},{"krate":0,"index":1045},{"krate":0,"index":1047},{"krate":0,"index":1049},{"krate":0,"index":1051},{"krate":0,"index":1053},{"krate":0,"index":1055},{"krate":0,"index":1057},{"krate":0,"index":1059},{"krate":0,"index":1061},{"krate":0,"index":1063},{"krate":0,"index":1065}],"decl_id":null,"docs":" `RoundingStrategy` represents the different rounding strategies that can be used by\n `round_dp_with_strategy`.\n","sig":null,"attributes":[{"value":"/ `RoundingStrategy` represents the different rounding strategies that can be used by","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":7388,"byte_end":7475,"line_start":117,"line_end":117,"column_start":1,"column_end":88}},{"value":"/ `round_dp_with_strategy`.","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":7476,"byte_end":7505,"line_start":118,"line_end":118,"column_start":1,"column_end":30}}]},{"kind":"Const","id":{"krate":0,"index":150},"span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":9876,"byte_end":9879,"line_start":172,"line_end":172,"column_start":15,"column_end":18},"name":"MIN","qualname":"::decimal::Decimal::MIN","value":"Decimal","parent":{"krate":0,"index":149},"children":[],"decl_id":null,"docs":" The smallest value that can be represented by this decimal type.","sig":null,"attributes":[{"value":"/ The smallest value that can be represented by this decimal type.","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":9555,"byte_end":9623,"line_start":162,"line_end":162,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":9628,"byte_end":9631,"line_start":163,"line_end":163,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":9636,"byte_end":9650,"line_start":164,"line_end":164,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":9655,"byte_end":9658,"line_start":165,"line_end":165,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":9663,"byte_end":9679,"line_start":166,"line_end":166,"column_start":5,"column_end":21}},{"value":"/ ```","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":9684,"byte_end":9691,"line_start":167,"line_end":167,"column_start":5,"column_end":12}},{"value":"/ # use rust_decimal::Decimal;","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":9696,"byte_end":9728,"line_start":168,"line_end":168,"column_start":5,"column_end":37}},{"value":"/ # use rust_decimal_macros::dec;","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":9733,"byte_end":9768,"line_start":169,"line_end":169,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(Decimal::MIN, dec!(-79_228_162_514_264_337_593_543_950_335));","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":9773,"byte_end":9849,"line_start":170,"line_end":170,"column_start":5,"column_end":81}},{"value":"/ ```","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":9854,"byte_end":9861,"line_start":171,"line_end":171,"column_start":5,"column_end":12}}]},{"kind":"Const","id":{"krate":0,"index":151},"span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":10219,"byte_end":10222,"line_start":183,"line_end":183,"column_start":15,"column_end":18},"name":"MAX","qualname":"::decimal::Decimal::MAX","value":"Decimal","parent":{"krate":0,"index":149},"children":[],"decl_id":null,"docs":" The largest value that can be represented by this decimal type.","sig":null,"attributes":[{"value":"/ The largest value that can be represented by this decimal type.","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":9900,"byte_end":9967,"line_start":173,"line_end":173,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":9972,"byte_end":9975,"line_start":174,"line_end":174,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":9980,"byte_end":9994,"line_start":175,"line_end":175,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":9999,"byte_end":10002,"line_start":176,"line_end":176,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":10007,"byte_end":10023,"line_start":177,"line_end":177,"column_start":5,"column_end":21}},{"value":"/ ```","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":10028,"byte_end":10035,"line_start":178,"line_end":178,"column_start":5,"column_end":12}},{"value":"/ # use rust_decimal::Decimal;","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":10040,"byte_end":10072,"line_start":179,"line_end":179,"column_start":5,"column_end":37}},{"value":"/ # use rust_decimal_macros::dec;","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":10077,"byte_end":10112,"line_start":180,"line_end":180,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(Decimal::MAX, dec!(79_228_162_514_264_337_593_543_950_335));","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":10117,"byte_end":10192,"line_start":181,"line_end":181,"column_start":5,"column_end":80}},{"value":"/ ```","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":10197,"byte_end":10204,"line_start":182,"line_end":182,"column_start":5,"column_end":12}}]},{"kind":"Const","id":{"krate":0,"index":152},"span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":10489,"byte_end":10493,"line_start":194,"line_end":194,"column_start":15,"column_end":19},"name":"ZERO","qualname":"::decimal::Decimal::ZERO","value":"Decimal","parent":{"krate":0,"index":149},"children":[],"decl_id":null,"docs":" A constant representing 0.","sig":null,"attributes":[{"value":"/ A constant representing 0.","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":10243,"byte_end":10273,"line_start":184,"line_end":184,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":10278,"byte_end":10281,"line_start":185,"line_end":185,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":10286,"byte_end":10300,"line_start":186,"line_end":186,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":10305,"byte_end":10308,"line_start":187,"line_end":187,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":10313,"byte_end":10329,"line_start":188,"line_end":188,"column_start":5,"column_end":21}},{"value":"/ ```","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":10334,"byte_end":10341,"line_start":189,"line_end":189,"column_start":5,"column_end":12}},{"value":"/ # use rust_decimal::Decimal;","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":10346,"byte_end":10378,"line_start":190,"line_end":190,"column_start":5,"column_end":37}},{"value":"/ # use rust_decimal_macros::dec;","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":10383,"byte_end":10418,"line_start":191,"line_end":191,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(Decimal::ZERO, dec!(0));","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":10423,"byte_end":10462,"line_start":192,"line_end":192,"column_start":5,"column_end":44}},{"value":"/ ```","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":10467,"byte_end":10474,"line_start":193,"line_end":193,"column_start":5,"column_end":12}}]},{"kind":"Const","id":{"krate":0,"index":153},"span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":10760,"byte_end":10763,"line_start":205,"line_end":205,"column_start":15,"column_end":18},"name":"ONE","qualname":"::decimal::Decimal::ONE","value":"Decimal","parent":{"krate":0,"index":149},"children":[],"decl_id":null,"docs":" A constant representing 1.","sig":null,"attributes":[{"value":"/ A constant representing 1.","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":10515,"byte_end":10545,"line_start":195,"line_end":195,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":10550,"byte_end":10553,"line_start":196,"line_end":196,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":10558,"byte_end":10572,"line_start":197,"line_end":197,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":10577,"byte_end":10580,"line_start":198,"line_end":198,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":10585,"byte_end":10601,"line_start":199,"line_end":199,"column_start":5,"column_end":21}},{"value":"/ ```","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":10606,"byte_end":10613,"line_start":200,"line_end":200,"column_start":5,"column_end":12}},{"value":"/ # use rust_decimal::Decimal;","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":10618,"byte_end":10650,"line_start":201,"line_end":201,"column_start":5,"column_end":37}},{"value":"/ # use rust_decimal_macros::dec;","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":10655,"byte_end":10690,"line_start":202,"line_end":202,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(Decimal::ONE, dec!(1));","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":10695,"byte_end":10733,"line_start":203,"line_end":203,"column_start":5,"column_end":43}},{"value":"/ ```","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":10738,"byte_end":10745,"line_start":204,"line_end":204,"column_start":5,"column_end":12}}]},{"kind":"Const","id":{"krate":0,"index":154},"span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":11040,"byte_end":11052,"line_start":216,"line_end":216,"column_start":15,"column_end":27},"name":"NEGATIVE_ONE","qualname":"::decimal::Decimal::NEGATIVE_ONE","value":"Decimal","parent":{"krate":0,"index":149},"children":[],"decl_id":null,"docs":" A constant representing -1.","sig":null,"attributes":[{"value":"/ A constant representing -1.","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":10784,"byte_end":10815,"line_start":206,"line_end":206,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":10820,"byte_end":10823,"line_start":207,"line_end":207,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":10828,"byte_end":10842,"line_start":208,"line_end":208,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":10847,"byte_end":10850,"line_start":209,"line_end":209,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":10855,"byte_end":10871,"line_start":210,"line_end":210,"column_start":5,"column_end":21}},{"value":"/ ```","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":10876,"byte_end":10883,"line_start":211,"line_end":211,"column_start":5,"column_end":12}},{"value":"/ # use rust_decimal::Decimal;","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":10888,"byte_end":10920,"line_start":212,"line_end":212,"column_start":5,"column_end":37}},{"value":"/ # use rust_decimal_macros::dec;","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":10925,"byte_end":10960,"line_start":213,"line_end":213,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(Decimal::NEGATIVE_ONE, dec!(-1));","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":10965,"byte_end":11013,"line_start":214,"line_end":214,"column_start":5,"column_end":53}},{"value":"/ ```","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":11018,"byte_end":11025,"line_start":215,"line_end":215,"column_start":5,"column_end":12}}]},{"kind":"Const","id":{"krate":0,"index":155},"span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":11327,"byte_end":11330,"line_start":227,"line_end":227,"column_start":15,"column_end":18},"name":"TWO","qualname":"::decimal::Decimal::TWO","value":"Decimal","parent":{"krate":0,"index":149},"children":[],"decl_id":null,"docs":" A constant representing 2.","sig":null,"attributes":[{"value":"/ A constant representing 2.","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":11082,"byte_end":11112,"line_start":217,"line_end":217,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":11117,"byte_end":11120,"line_start":218,"line_end":218,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":11125,"byte_end":11139,"line_start":219,"line_end":219,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":11144,"byte_end":11147,"line_start":220,"line_end":220,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":11152,"byte_end":11168,"line_start":221,"line_end":221,"column_start":5,"column_end":21}},{"value":"/ ```","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":11173,"byte_end":11180,"line_start":222,"line_end":222,"column_start":5,"column_end":12}},{"value":"/ # use rust_decimal::Decimal;","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":11185,"byte_end":11217,"line_start":223,"line_end":223,"column_start":5,"column_end":37}},{"value":"/ # use rust_decimal_macros::dec;","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":11222,"byte_end":11257,"line_start":224,"line_end":224,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(Decimal::TWO, dec!(2));","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":11262,"byte_end":11300,"line_start":225,"line_end":225,"column_start":5,"column_end":43}},{"value":"/ ```","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":11305,"byte_end":11312,"line_start":226,"line_end":226,"column_start":5,"column_end":12}}]},{"kind":"Const","id":{"krate":0,"index":156},"span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":11598,"byte_end":11601,"line_start":238,"line_end":238,"column_start":15,"column_end":18},"name":"TEN","qualname":"::decimal::Decimal::TEN","value":"Decimal","parent":{"krate":0,"index":149},"children":[],"decl_id":null,"docs":" A constant representing 10.","sig":null,"attributes":[{"value":"/ A constant representing 10.","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":11351,"byte_end":11382,"line_start":228,"line_end":228,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":11387,"byte_end":11390,"line_start":229,"line_end":229,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":11395,"byte_end":11409,"line_start":230,"line_end":230,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":11414,"byte_end":11417,"line_start":231,"line_end":231,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":11422,"byte_end":11438,"line_start":232,"line_end":232,"column_start":5,"column_end":21}},{"value":"/ ```","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":11443,"byte_end":11450,"line_start":233,"line_end":233,"column_start":5,"column_end":12}},{"value":"/ # use rust_decimal::Decimal;","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":11455,"byte_end":11487,"line_start":234,"line_end":234,"column_start":5,"column_end":37}},{"value":"/ # use rust_decimal_macros::dec;","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":11492,"byte_end":11527,"line_start":235,"line_end":235,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(Decimal::TEN, dec!(10));","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":11532,"byte_end":11571,"line_start":236,"line_end":236,"column_start":5,"column_end":44}},{"value":"/ ```","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":11576,"byte_end":11583,"line_start":237,"line_end":237,"column_start":5,"column_end":12}}]},{"kind":"Const","id":{"krate":0,"index":157},"span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":11879,"byte_end":11890,"line_start":249,"line_end":249,"column_start":15,"column_end":26},"name":"ONE_HUNDRED","qualname":"::decimal::Decimal::ONE_HUNDRED","value":"Decimal","parent":{"krate":0,"index":149},"children":[],"decl_id":null,"docs":" A constant representing 100.","sig":null,"attributes":[{"value":"/ A constant representing 100.","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":11622,"byte_end":11654,"line_start":239,"line_end":239,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":11659,"byte_end":11662,"line_start":240,"line_end":240,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":11667,"byte_end":11681,"line_start":241,"line_end":241,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":11686,"byte_end":11689,"line_start":242,"line_end":242,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":11694,"byte_end":11710,"line_start":243,"line_end":243,"column_start":5,"column_end":21}},{"value":"/ ```","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":11715,"byte_end":11722,"line_start":244,"line_end":244,"column_start":5,"column_end":12}},{"value":"/ # use rust_decimal::Decimal;","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":11727,"byte_end":11759,"line_start":245,"line_end":245,"column_start":5,"column_end":37}},{"value":"/ # use rust_decimal_macros::dec;","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":11764,"byte_end":11799,"line_start":246,"line_end":246,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(Decimal::ONE_HUNDRED, dec!(100));","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":11804,"byte_end":11852,"line_start":247,"line_end":247,"column_start":5,"column_end":53}},{"value":"/ ```","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":11857,"byte_end":11864,"line_start":248,"line_end":248,"column_start":5,"column_end":12}}]},{"kind":"Const","id":{"krate":0,"index":158},"span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":12179,"byte_end":12191,"line_start":260,"line_end":260,"column_start":15,"column_end":27},"name":"ONE_THOUSAND","qualname":"::decimal::Decimal::ONE_THOUSAND","value":"Decimal","parent":{"krate":0,"index":149},"children":[],"decl_id":null,"docs":" A constant representing 1000.","sig":null,"attributes":[{"value":"/ A constant representing 1000.","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":11919,"byte_end":11952,"line_start":250,"line_end":250,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":11957,"byte_end":11960,"line_start":251,"line_end":251,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":11965,"byte_end":11979,"line_start":252,"line_end":252,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":11984,"byte_end":11987,"line_start":253,"line_end":253,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":11992,"byte_end":12008,"line_start":254,"line_end":254,"column_start":5,"column_end":21}},{"value":"/ ```","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":12013,"byte_end":12020,"line_start":255,"line_end":255,"column_start":5,"column_end":12}},{"value":"/ # use rust_decimal::Decimal;","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":12025,"byte_end":12057,"line_start":256,"line_end":256,"column_start":5,"column_end":37}},{"value":"/ # use rust_decimal_macros::dec;","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":12062,"byte_end":12097,"line_start":257,"line_end":257,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(Decimal::ONE_THOUSAND, dec!(1000));","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":12102,"byte_end":12152,"line_start":258,"line_end":258,"column_start":5,"column_end":55}},{"value":"/ ```","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":12157,"byte_end":12164,"line_start":259,"line_end":259,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":159},"span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":15708,"byte_end":15711,"line_start":385,"line_end":385,"column_start":12,"column_end":15},"name":"new","qualname":"<Decimal>::new","value":"pub fn new(i64, u32) -> Decimal","parent":null,"children":[],"decl_id":null,"docs":" Returns a `Decimal` with a 64 bit `m` representation and corresponding `e` scale.","sig":null,"attributes":[{"value":"/ Returns a `Decimal` with a 64 bit `m` representation and corresponding `e` scale.","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":15130,"byte_end":15215,"line_start":365,"line_end":365,"column_start":5,"column_end":90}},{"value":"/","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":15220,"byte_end":15223,"line_start":366,"line_end":366,"column_start":5,"column_end":8}},{"value":"/ # Arguments","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":15228,"byte_end":15243,"line_start":367,"line_end":367,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":15248,"byte_end":15251,"line_start":368,"line_end":368,"column_start":5,"column_end":8}},{"value":"/ * `num` - An i64 that represents the `m` portion of the decimal number","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":15256,"byte_end":15330,"line_start":369,"line_end":369,"column_start":5,"column_end":79}},{"value":"/ * `scale` - A u32 representing the `e` portion of the decimal number.","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":15335,"byte_end":15408,"line_start":370,"line_end":370,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":15413,"byte_end":15416,"line_start":371,"line_end":371,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":15421,"byte_end":15433,"line_start":372,"line_end":372,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":15438,"byte_end":15441,"line_start":373,"line_end":373,"column_start":5,"column_end":8}},{"value":"/ This function panics if `scale` is > 28.","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":15446,"byte_end":15490,"line_start":374,"line_end":374,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":15495,"byte_end":15498,"line_start":375,"line_end":375,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":15503,"byte_end":15516,"line_start":376,"line_end":376,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":15521,"byte_end":15524,"line_start":377,"line_end":377,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":15529,"byte_end":15536,"line_start":378,"line_end":378,"column_start":5,"column_end":12}},{"value":"/ # use rust_decimal::Decimal;","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":15541,"byte_end":15573,"line_start":379,"line_end":379,"column_start":5,"column_end":37}},{"value":"/ #","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":15578,"byte_end":15583,"line_start":380,"line_end":380,"column_start":5,"column_end":10}},{"value":"/ let pi = Decimal::new(3141, 3);","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":15588,"byte_end":15623,"line_start":381,"line_end":381,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(pi.to_string(), \"3.141\");","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":15628,"byte_end":15668,"line_start":382,"line_end":382,"column_start":5,"column_end":45}},{"value":"/ ```","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":15673,"byte_end":15680,"line_start":383,"line_end":383,"column_start":5,"column_end":12}},{"value":"must_use","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":15685,"byte_end":15696,"line_start":384,"line_end":384,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":160},"span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":16177,"byte_end":16184,"line_start":402,"line_end":402,"column_start":18,"column_end":25},"name":"try_new","qualname":"<Decimal>::try_new","value":"pub const fn try_new(i64, u32) -> crate::Result<Decimal>","parent":null,"children":[],"decl_id":null,"docs":" Checked version of `Decimal::new`. Will return `Err` instead of panicking at run-time.","sig":null,"attributes":[{"value":"/ Checked version of `Decimal::new`. Will return `Err` instead of panicking at run-time.","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":15873,"byte_end":15963,"line_start":392,"line_end":392,"column_start":5,"column_end":95}},{"value":"/","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":15968,"byte_end":15971,"line_start":393,"line_end":393,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":15976,"byte_end":15989,"line_start":394,"line_end":394,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":15994,"byte_end":15997,"line_start":395,"line_end":395,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":16002,"byte_end":16013,"line_start":396,"line_end":396,"column_start":5,"column_end":16}},{"value":"/ # use rust_decimal::Decimal;","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":16018,"byte_end":16050,"line_start":397,"line_end":397,"column_start":5,"column_end":37}},{"value":"/ #","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":16055,"byte_end":16060,"line_start":398,"line_end":398,"column_start":5,"column_end":10}},{"value":"/ let max = Decimal::try_new(i64::MAX, u32::MAX);","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":16065,"byte_end":16116,"line_start":399,"line_end":399,"column_start":5,"column_end":56}},{"value":"/ assert!(max.is_err());","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":16121,"byte_end":16147,"line_start":400,"line_end":400,"column_start":5,"column_end":31}},{"value":"/ ```","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":16152,"byte_end":16159,"line_start":401,"line_end":401,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":161},"span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":17552,"byte_end":17572,"line_start":444,"line_end":444,"column_start":12,"column_end":32},"name":"from_i128_with_scale","qualname":"<Decimal>::from_i128_with_scale","value":"pub fn from_i128_with_scale(i128, u32) -> Decimal","parent":null,"children":[],"decl_id":null,"docs":" Creates a `Decimal` using a 128 bit signed `m` representation and corresponding `e` scale.","sig":null,"attributes":[{"value":"/ Creates a `Decimal` using a 128 bit signed `m` representation and corresponding `e` scale.","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":16889,"byte_end":16983,"line_start":424,"line_end":424,"column_start":5,"column_end":99}},{"value":"/","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":16988,"byte_end":16991,"line_start":425,"line_end":425,"column_start":5,"column_end":8}},{"value":"/ # Arguments","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":16996,"byte_end":17011,"line_start":426,"line_end":426,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":17016,"byte_end":17019,"line_start":427,"line_end":427,"column_start":5,"column_end":8}},{"value":"/ * `num` - An i128 that represents the `m` portion of the decimal number","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":17024,"byte_end":17099,"line_start":428,"line_end":428,"column_start":5,"column_end":80}},{"value":"/ * `scale` - A u32 representing the `e` portion of the decimal number.","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":17104,"byte_end":17177,"line_start":429,"line_end":429,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":17182,"byte_end":17185,"line_start":430,"line_end":430,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":17190,"byte_end":17202,"line_start":431,"line_end":431,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":17207,"byte_end":17210,"line_start":432,"line_end":432,"column_start":5,"column_end":8}},{"value":"/ This function panics if `scale` is > 28 or if `num` exceeds the maximum supported 96 bits.","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":17215,"byte_end":17309,"line_start":433,"line_end":433,"column_start":5,"column_end":99}},{"value":"/","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":17314,"byte_end":17317,"line_start":434,"line_end":434,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":17322,"byte_end":17335,"line_start":435,"line_end":435,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":17340,"byte_end":17343,"line_start":436,"line_end":436,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":17348,"byte_end":17359,"line_start":437,"line_end":437,"column_start":5,"column_end":16}},{"value":"/ # use rust_decimal::Decimal;","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":17364,"byte_end":17396,"line_start":438,"line_end":438,"column_start":5,"column_end":37}},{"value":"/ #","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":17401,"byte_end":17406,"line_start":439,"line_end":439,"column_start":5,"column_end":10}},{"value":"/ let pi = Decimal::from_i128_with_scale(3141i128, 3);","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":17411,"byte_end":17467,"line_start":440,"line_end":440,"column_start":5,"column_end":61}},{"value":"/ assert_eq!(pi.to_string(), \"3.141\");","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":17472,"byte_end":17512,"line_start":441,"line_end":441,"column_start":5,"column_end":45}},{"value":"/ ```","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":17517,"byte_end":17524,"line_start":442,"line_end":442,"column_start":5,"column_end":12}},{"value":"must_use","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":17529,"byte_end":17540,"line_start":443,"line_end":443,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":162},"span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":18099,"byte_end":18123,"line_start":462,"line_end":462,"column_start":18,"column_end":42},"name":"try_from_i128_with_scale","qualname":"<Decimal>::try_from_i128_with_scale","value":"pub const fn try_from_i128_with_scale(i128, u32) -> crate::Result<Decimal>","parent":null,"children":[],"decl_id":null,"docs":" Checked version of `Decimal::from_i128_with_scale`. Will return `Err` instead\n of panicking at run-time.","sig":null,"attributes":[{"value":"/ Checked version of `Decimal::from_i128_with_scale`. Will return `Err` instead","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":17752,"byte_end":17833,"line_start":451,"line_end":451,"column_start":5,"column_end":86}},{"value":"/ of panicking at run-time.","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":17838,"byte_end":17867,"line_start":452,"line_end":452,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":17872,"byte_end":17875,"line_start":453,"line_end":453,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":17880,"byte_end":17893,"line_start":454,"line_end":454,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":17898,"byte_end":17901,"line_start":455,"line_end":455,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":17906,"byte_end":17917,"line_start":456,"line_end":456,"column_start":5,"column_end":16}},{"value":"/ # use rust_decimal::Decimal;","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":17922,"byte_end":17954,"line_start":457,"line_end":457,"column_start":5,"column_end":37}},{"value":"/ #","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":17959,"byte_end":17964,"line_start":458,"line_end":458,"column_start":5,"column_end":10}},{"value":"/ let max = Decimal::try_from_i128_with_scale(i128::MAX, u32::MAX);","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":17969,"byte_end":18038,"line_start":459,"line_end":459,"column_start":5,"column_end":74}},{"value":"/ assert!(max.is_err());","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":18043,"byte_end":18069,"line_start":460,"line_end":460,"column_start":5,"column_end":31}},{"value":"/ ```","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":18074,"byte_end":18081,"line_start":461,"line_end":461,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":163},"span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":20029,"byte_end":20039,"line_start":511,"line_end":511,"column_start":18,"column_end":28},"name":"from_parts","qualname":"<Decimal>::from_parts","value":"pub const fn from_parts(u32, u32, u32, bool, u32) -> Decimal","parent":null,"children":[],"decl_id":null,"docs":" Returns a `Decimal` using the instances constituent parts.","sig":null,"attributes":[{"value":"/ Returns a `Decimal` using the instances constituent parts.","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":18924,"byte_end":18986,"line_start":485,"line_end":485,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":18991,"byte_end":18994,"line_start":486,"line_end":486,"column_start":5,"column_end":8}},{"value":"/ # Arguments","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":18999,"byte_end":19014,"line_start":487,"line_end":487,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":19019,"byte_end":19022,"line_start":488,"line_end":488,"column_start":5,"column_end":8}},{"value":"/ * `lo` - The low 32 bits of a 96-bit integer.","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":19027,"byte_end":19076,"line_start":489,"line_end":489,"column_start":5,"column_end":54}},{"value":"/ * `mid` - The middle 32 bits of a 96-bit integer.","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":19081,"byte_end":19134,"line_start":490,"line_end":490,"column_start":5,"column_end":58}},{"value":"/ * `hi` - The high 32 bits of a 96-bit integer.","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":19139,"byte_end":19189,"line_start":491,"line_end":491,"column_start":5,"column_end":55}},{"value":"/ * `negative` - `true` to indicate a negative number.","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":19194,"byte_end":19250,"line_start":492,"line_end":492,"column_start":5,"column_end":61}},{"value":"/ * `scale` - A power of 10 ranging from 0 to 28.","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":19255,"byte_end":19306,"line_start":493,"line_end":493,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":19311,"byte_end":19314,"line_start":494,"line_end":494,"column_start":5,"column_end":8}},{"value":"/ # Caution: Undefined behavior","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":19319,"byte_end":19352,"line_start":495,"line_end":495,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":19357,"byte_end":19360,"line_start":496,"line_end":496,"column_start":5,"column_end":8}},{"value":"/ While a scale greater than 28 can be passed in, it will be automatically capped by this","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":19365,"byte_end":19456,"line_start":497,"line_end":497,"column_start":5,"column_end":96}},{"value":"/ function at the maximum precision. The library opts towards this functionality as opposed","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":19461,"byte_end":19554,"line_start":498,"line_end":498,"column_start":5,"column_end":98}},{"value":"/ to a panic to ensure that the function can be treated as constant. This may lead to","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":19559,"byte_end":19646,"line_start":499,"line_end":499,"column_start":5,"column_end":92}},{"value":"/ undefined behavior in downstream applications and should be treated with caution.","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":19651,"byte_end":19736,"line_start":500,"line_end":500,"column_start":5,"column_end":90}},{"value":"/","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":19741,"byte_end":19744,"line_start":501,"line_end":501,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":19749,"byte_end":19762,"line_start":502,"line_end":502,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":19767,"byte_end":19770,"line_start":503,"line_end":503,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":19775,"byte_end":19782,"line_start":504,"line_end":504,"column_start":5,"column_end":12}},{"value":"/ # use rust_decimal::Decimal;","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":19787,"byte_end":19819,"line_start":505,"line_end":505,"column_start":5,"column_end":37}},{"value":"/ #","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":19824,"byte_end":19829,"line_start":506,"line_end":506,"column_start":5,"column_end":10}},{"value":"/ let pi = Decimal::from_parts(1102470952, 185874565, 1703060790, false, 28);","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":19834,"byte_end":19913,"line_start":507,"line_end":507,"column_start":5,"column_end":84}},{"value":"/ assert_eq!(pi.to_string(), \"3.1415926535897932384626433832\");","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":19918,"byte_end":19983,"line_start":508,"line_end":508,"column_start":5,"column_end":70}},{"value":"/ ```","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":19988,"byte_end":19995,"line_start":509,"line_end":509,"column_start":5,"column_end":12}},{"value":"must_use","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":20000,"byte_end":20011,"line_start":510,"line_end":510,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":165},"span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":21356,"byte_end":21371,"line_start":559,"line_end":559,"column_start":12,"column_end":27},"name":"from_scientific","qualname":"<Decimal>::from_scientific","value":"pub fn from_scientific(&str) -> Result<Decimal, Error>","parent":null,"children":[],"decl_id":null,"docs":" Returns a `Result` which if successful contains the `Decimal` constitution of\n the scientific notation provided by `value`.","sig":null,"attributes":[{"value":"/ Returns a `Result` which if successful contains the `Decimal` constitution of","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":20807,"byte_end":20888,"line_start":541,"line_end":541,"column_start":5,"column_end":86}},{"value":"/ the scientific notation provided by `value`.","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":20893,"byte_end":20941,"line_start":542,"line_end":542,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":20946,"byte_end":20949,"line_start":543,"line_end":543,"column_start":5,"column_end":8}},{"value":"/ # Arguments","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":20954,"byte_end":20969,"line_start":544,"line_end":544,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":20974,"byte_end":20977,"line_start":545,"line_end":545,"column_start":5,"column_end":8}},{"value":"/ * `value` - The scientific notation of the `Decimal`.","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":20982,"byte_end":21039,"line_start":546,"line_end":546,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":21044,"byte_end":21047,"line_start":547,"line_end":547,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":21052,"byte_end":21065,"line_start":548,"line_end":548,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":21070,"byte_end":21073,"line_start":549,"line_end":549,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":21078,"byte_end":21085,"line_start":550,"line_end":550,"column_start":5,"column_end":12}},{"value":"/ # use rust_decimal::Decimal;","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":21090,"byte_end":21122,"line_start":551,"line_end":551,"column_start":5,"column_end":37}},{"value":"/ #","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":21127,"byte_end":21132,"line_start":552,"line_end":552,"column_start":5,"column_end":10}},{"value":"/ # fn main() -> Result<(), rust_decimal::Error> {","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":21137,"byte_end":21189,"line_start":553,"line_end":553,"column_start":5,"column_end":57}},{"value":"/ let value = Decimal::from_scientific(\"9.7e-7\")?;","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":21194,"byte_end":21246,"line_start":554,"line_end":554,"column_start":5,"column_end":57}},{"value":"/ assert_eq!(value.to_string(), \"0.00000097\");","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":21251,"byte_end":21299,"line_start":555,"line_end":555,"column_start":5,"column_end":53}},{"value":"/ #     Ok(())","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":21304,"byte_end":21320,"line_start":556,"line_end":556,"column_start":5,"column_end":21}},{"value":"/ # }","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":21325,"byte_end":21332,"line_start":557,"line_end":557,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":21337,"byte_end":21344,"line_start":558,"line_end":558,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":175},"span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":24466,"byte_end":24480,"line_start":639,"line_end":639,"column_start":12,"column_end":26},"name":"from_str_radix","qualname":"<Decimal>::from_str_radix","value":"pub fn from_str_radix(&str, u32) -> Result<Self, crate::Error>","parent":null,"children":[],"decl_id":null,"docs":" Converts a string slice in a given base to a decimal.","sig":null,"attributes":[{"value":"/ Converts a string slice in a given base to a decimal.","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":23829,"byte_end":23886,"line_start":617,"line_end":617,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":23891,"byte_end":23894,"line_start":618,"line_end":618,"column_start":5,"column_end":8}},{"value":"/ The string is expected to be an optional + sign followed by digits.","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":23899,"byte_end":23970,"line_start":619,"line_end":619,"column_start":5,"column_end":76}},{"value":"/ Digits are a subset of these characters, depending on radix, and will return an error if outside","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":23975,"byte_end":24075,"line_start":620,"line_end":620,"column_start":5,"column_end":105}},{"value":"/ the expected range:","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":24080,"byte_end":24103,"line_start":621,"line_end":621,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":24108,"byte_end":24111,"line_start":622,"line_end":622,"column_start":5,"column_end":8}},{"value":"/ * 0-9","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":24116,"byte_end":24125,"line_start":623,"line_end":623,"column_start":5,"column_end":14}},{"value":"/ * a-z","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":24130,"byte_end":24139,"line_start":624,"line_end":624,"column_start":5,"column_end":14}},{"value":"/ * A-Z","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":24144,"byte_end":24153,"line_start":625,"line_end":625,"column_start":5,"column_end":14}},{"value":"/","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":24158,"byte_end":24161,"line_start":626,"line_end":626,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":24166,"byte_end":24180,"line_start":627,"line_end":627,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":24185,"byte_end":24188,"line_start":628,"line_end":628,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":24193,"byte_end":24209,"line_start":629,"line_end":629,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":24214,"byte_end":24217,"line_start":630,"line_end":630,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":24222,"byte_end":24229,"line_start":631,"line_end":631,"column_start":5,"column_end":12}},{"value":"/ # use rust_decimal::prelude::*;","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":24234,"byte_end":24269,"line_start":632,"line_end":632,"column_start":5,"column_end":40}},{"value":"/ #","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":24274,"byte_end":24279,"line_start":633,"line_end":633,"column_start":5,"column_end":10}},{"value":"/ # fn main() -> Result<(), rust_decimal::Error> {","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":24284,"byte_end":24336,"line_start":634,"line_end":634,"column_start":5,"column_end":57}},{"value":"/ assert_eq!(Decimal::from_str_radix(\"A\", 16)?.to_string(), \"10\");","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":24341,"byte_end":24409,"line_start":635,"line_end":635,"column_start":5,"column_end":73}},{"value":"/ #     Ok(())","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":24414,"byte_end":24430,"line_start":636,"line_end":636,"column_start":5,"column_end":21}},{"value":"/ # }","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":24435,"byte_end":24442,"line_start":637,"line_end":637,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":24447,"byte_end":24454,"line_start":638,"line_end":638,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":176},"span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":25443,"byte_end":25457,"line_start":665,"line_end":665,"column_start":12,"column_end":26},"name":"from_str_exact","qualname":"<Decimal>::from_str_exact","value":"pub fn from_str_exact(&str) -> Result<Self, crate::Error>","parent":null,"children":[],"decl_id":null,"docs":" Parses a string slice into a decimal. If the value underflows and cannot be represented with the\n given scale then this will return an error.","sig":null,"attributes":[{"value":"/ Parses a string slice into a decimal. If the value underflows and cannot be represented with the","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":24701,"byte_end":24801,"line_start":647,"line_end":647,"column_start":5,"column_end":105}},{"value":"/ given scale then this will return an error.","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":24806,"byte_end":24853,"line_start":648,"line_end":648,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":24858,"byte_end":24861,"line_start":649,"line_end":649,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":24866,"byte_end":24880,"line_start":650,"line_end":650,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":24885,"byte_end":24888,"line_start":651,"line_end":651,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":24893,"byte_end":24909,"line_start":652,"line_end":652,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":24914,"byte_end":24917,"line_start":653,"line_end":653,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":24922,"byte_end":24929,"line_start":654,"line_end":654,"column_start":5,"column_end":12}},{"value":"/ # use rust_decimal::prelude::*;","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":24934,"byte_end":24969,"line_start":655,"line_end":655,"column_start":5,"column_end":40}},{"value":"/ # use rust_decimal::Error;","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":24974,"byte_end":25004,"line_start":656,"line_end":656,"column_start":5,"column_end":35}},{"value":"/ #","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":25009,"byte_end":25014,"line_start":657,"line_end":657,"column_start":5,"column_end":10}},{"value":"/ # fn main() -> Result<(), rust_decimal::Error> {","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":25019,"byte_end":25071,"line_start":658,"line_end":658,"column_start":5,"column_end":57}},{"value":"/ assert_eq!(Decimal::from_str_exact(\"0.001\")?.to_string(), \"0.001\");","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":25076,"byte_end":25147,"line_start":659,"line_end":659,"column_start":5,"column_end":76}},{"value":"/ assert_eq!(Decimal::from_str_exact(\"0.00000_00000_00000_00000_00000_001\")?.to_string(), \"0.0000000000000000000000000001\");","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":25152,"byte_end":25278,"line_start":660,"line_end":660,"column_start":5,"column_end":131}},{"value":"/ assert_eq!(Decimal::from_str_exact(\"0.00000_00000_00000_00000_00000_0001\"), Err(Error::Underflow));","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":25283,"byte_end":25386,"line_start":661,"line_end":661,"column_start":5,"column_end":108}},{"value":"/ #     Ok(())","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":25391,"byte_end":25407,"line_start":662,"line_end":662,"column_start":5,"column_end":21}},{"value":"/ # }","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":25412,"byte_end":25419,"line_start":663,"line_end":663,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":25424,"byte_end":25431,"line_start":664,"line_end":664,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":177},"span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":25863,"byte_end":25868,"line_start":681,"line_end":681,"column_start":18,"column_end":23},"name":"scale","qualname":"<Decimal>::scale","value":"pub const fn scale(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns the scale of the decimal number, otherwise known as `e`.","sig":null,"attributes":[{"value":"/ Returns the scale of the decimal number, otherwise known as `e`.","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":25562,"byte_end":25630,"line_start":669,"line_end":669,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":25635,"byte_end":25638,"line_start":670,"line_end":670,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":25643,"byte_end":25656,"line_start":671,"line_end":671,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":25661,"byte_end":25664,"line_start":672,"line_end":672,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":25669,"byte_end":25676,"line_start":673,"line_end":673,"column_start":5,"column_end":12}},{"value":"/ # use rust_decimal::Decimal;","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":25681,"byte_end":25713,"line_start":674,"line_end":674,"column_start":5,"column_end":37}},{"value":"/ #","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":25718,"byte_end":25723,"line_start":675,"line_end":675,"column_start":5,"column_end":10}},{"value":"/ let num = Decimal::new(1234, 3);","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":25728,"byte_end":25764,"line_start":676,"line_end":676,"column_start":5,"column_end":41}},{"value":"/ assert_eq!(num.scale(), 3u32);","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":25769,"byte_end":25803,"line_start":677,"line_end":677,"column_start":5,"column_end":39}},{"value":"/ ```","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":25808,"byte_end":25815,"line_start":678,"line_end":678,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":25820,"byte_end":25829,"line_start":679,"line_end":679,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":25834,"byte_end":25845,"line_start":680,"line_end":680,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":178},"span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":26302,"byte_end":26310,"line_start":698,"line_end":698,"column_start":18,"column_end":26},"name":"mantissa","qualname":"<Decimal>::mantissa","value":"pub const fn mantissa(&Self) -> i128","parent":null,"children":[],"decl_id":null,"docs":" Returns the mantissa of the decimal number.","sig":null,"attributes":[{"value":"/ Returns the mantissa of the decimal number.","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":25954,"byte_end":26001,"line_start":685,"line_end":685,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":26006,"byte_end":26009,"line_start":686,"line_end":686,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":26014,"byte_end":26027,"line_start":687,"line_end":687,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":26032,"byte_end":26035,"line_start":688,"line_end":688,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":26040,"byte_end":26047,"line_start":689,"line_end":689,"column_start":5,"column_end":12}},{"value":"/ # use rust_decimal::prelude::*;","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":26052,"byte_end":26087,"line_start":690,"line_end":690,"column_start":5,"column_end":40}},{"value":"/ use rust_decimal_macros::dec;","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":26092,"byte_end":26125,"line_start":691,"line_end":691,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":26130,"byte_end":26133,"line_start":692,"line_end":692,"column_start":5,"column_end":8}},{"value":"/ let num = dec!(-1.2345678);","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":26138,"byte_end":26169,"line_start":693,"line_end":693,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(num.mantissa(), -12345678i128);","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":26174,"byte_end":26220,"line_start":694,"line_end":694,"column_start":5,"column_end":51}},{"value":"/ assert_eq!(num.scale(), 7);","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":26225,"byte_end":26256,"line_start":695,"line_end":695,"column_start":5,"column_end":36}},{"value":"/ ```","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":26261,"byte_end":26268,"line_start":696,"line_end":696,"column_start":5,"column_end":12}},{"value":"must_use","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":26273,"byte_end":26284,"line_start":697,"line_end":697,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":179},"span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":26799,"byte_end":26806,"line_start":718,"line_end":718,"column_start":18,"column_end":25},"name":"is_zero","qualname":"<Decimal>::is_zero","value":"pub const fn is_zero(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if this Decimal number is equivalent to zero.","sig":null,"attributes":[{"value":"/ Returns true if this Decimal number is equivalent to zero.","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":26530,"byte_end":26592,"line_start":707,"line_end":707,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":26597,"byte_end":26600,"line_start":708,"line_end":708,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":26605,"byte_end":26618,"line_start":709,"line_end":709,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":26623,"byte_end":26626,"line_start":710,"line_end":710,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":26631,"byte_end":26638,"line_start":711,"line_end":711,"column_start":5,"column_end":12}},{"value":"/ # use rust_decimal::prelude::*;","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":26643,"byte_end":26678,"line_start":712,"line_end":712,"column_start":5,"column_end":40}},{"value":"/ #","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":26683,"byte_end":26688,"line_start":713,"line_end":713,"column_start":5,"column_end":10}},{"value":"/ let num = Decimal::ZERO;","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":26693,"byte_end":26721,"line_start":714,"line_end":714,"column_start":5,"column_end":33}},{"value":"/ assert!(num.is_zero());","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":26726,"byte_end":26753,"line_start":715,"line_end":715,"column_start":5,"column_end":32}},{"value":"/ ```","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":26758,"byte_end":26765,"line_start":716,"line_end":716,"column_start":5,"column_end":12}},{"value":"must_use","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":26770,"byte_end":26781,"line_start":717,"line_end":717,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":180},"span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":27372,"byte_end":27380,"line_start":738,"line_end":738,"column_start":12,"column_end":20},"name":"set_sign","qualname":"<Decimal>::set_sign","value":"pub fn set_sign(&mut Self, bool)","parent":null,"children":[],"decl_id":null,"docs":" An optimized method for changing the sign of a decimal number.","sig":null,"attributes":[{"value":"/ An optimized method for changing the sign of a decimal number.","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":26889,"byte_end":26955,"line_start":722,"line_end":722,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":26960,"byte_end":26963,"line_start":723,"line_end":723,"column_start":5,"column_end":8}},{"value":"/ # Arguments","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":26968,"byte_end":26983,"line_start":724,"line_end":724,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":26988,"byte_end":26991,"line_start":725,"line_end":725,"column_start":5,"column_end":8}},{"value":"/ * `positive`: true if the resulting decimal should be positive.","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":26996,"byte_end":27063,"line_start":726,"line_end":726,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":27068,"byte_end":27071,"line_start":727,"line_end":727,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":27076,"byte_end":27089,"line_start":728,"line_end":728,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":27094,"byte_end":27097,"line_start":729,"line_end":729,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":27102,"byte_end":27109,"line_start":730,"line_end":730,"column_start":5,"column_end":12}},{"value":"/ # use rust_decimal::Decimal;","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":27114,"byte_end":27146,"line_start":731,"line_end":731,"column_start":5,"column_end":37}},{"value":"/ #","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":27151,"byte_end":27156,"line_start":732,"line_end":732,"column_start":5,"column_end":10}},{"value":"/ let mut one = Decimal::ONE;","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":27161,"byte_end":27192,"line_start":733,"line_end":733,"column_start":5,"column_end":36}},{"value":"/ one.set_sign(false);","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":27197,"byte_end":27221,"line_start":734,"line_end":734,"column_start":5,"column_end":29}},{"value":"/ assert_eq!(one.to_string(), \"-1\");","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":27226,"byte_end":27264,"line_start":735,"line_end":735,"column_start":5,"column_end":43}},{"value":"/ ```","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":27269,"byte_end":27276,"line_start":736,"line_end":736,"column_start":5,"column_end":12}},{"value":"deprecated(since = \"1.4.0\", note =\n\"please use `set_sign_positive` instead\")","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":27281,"byte_end":27360,"line_start":737,"line_end":737,"column_start":5,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":181},"span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":27893,"byte_end":27910,"line_start":758,"line_end":758,"column_start":12,"column_end":29},"name":"set_sign_positive","qualname":"<Decimal>::set_sign_positive","value":"pub fn set_sign_positive(&mut Self, bool)","parent":null,"children":[],"decl_id":null,"docs":" An optimized method for changing the sign of a decimal number.","sig":null,"attributes":[{"value":"/ An optimized method for changing the sign of a decimal number.","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":27463,"byte_end":27529,"line_start":742,"line_end":742,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":27534,"byte_end":27537,"line_start":743,"line_end":743,"column_start":5,"column_end":8}},{"value":"/ # Arguments","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":27542,"byte_end":27557,"line_start":744,"line_end":744,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":27562,"byte_end":27565,"line_start":745,"line_end":745,"column_start":5,"column_end":8}},{"value":"/ * `positive`: true if the resulting decimal should be positive.","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":27570,"byte_end":27637,"line_start":746,"line_end":746,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":27642,"byte_end":27645,"line_start":747,"line_end":747,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":27650,"byte_end":27663,"line_start":748,"line_end":748,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":27668,"byte_end":27671,"line_start":749,"line_end":749,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":27676,"byte_end":27683,"line_start":750,"line_end":750,"column_start":5,"column_end":12}},{"value":"/ # use rust_decimal::Decimal;","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":27688,"byte_end":27720,"line_start":751,"line_end":751,"column_start":5,"column_end":37}},{"value":"/ #","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":27725,"byte_end":27730,"line_start":752,"line_end":752,"column_start":5,"column_end":10}},{"value":"/ let mut one = Decimal::ONE;","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":27735,"byte_end":27766,"line_start":753,"line_end":753,"column_start":5,"column_end":36}},{"value":"/ one.set_sign_positive(false);","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":27771,"byte_end":27804,"line_start":754,"line_end":754,"column_start":5,"column_end":38}},{"value":"/ assert_eq!(one.to_string(), \"-1\");","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":27809,"byte_end":27847,"line_start":755,"line_end":755,"column_start":5,"column_end":43}},{"value":"/ ```","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":27852,"byte_end":27859,"line_start":756,"line_end":756,"column_start":5,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":27864,"byte_end":27881,"line_start":757,"line_end":757,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":182},"span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":28505,"byte_end":28522,"line_start":782,"line_end":782,"column_start":12,"column_end":29},"name":"set_sign_negative","qualname":"<Decimal>::set_sign_negative","value":"pub fn set_sign_negative(&mut Self, bool)","parent":null,"children":[],"decl_id":null,"docs":" An optimized method for changing the sign of a decimal number.","sig":null,"attributes":[{"value":"/ An optimized method for changing the sign of a decimal number.","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":28076,"byte_end":28142,"line_start":766,"line_end":766,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":28147,"byte_end":28150,"line_start":767,"line_end":767,"column_start":5,"column_end":8}},{"value":"/ # Arguments","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":28155,"byte_end":28170,"line_start":768,"line_end":768,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":28175,"byte_end":28178,"line_start":769,"line_end":769,"column_start":5,"column_end":8}},{"value":"/ * `negative`: true if the resulting decimal should be negative.","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":28183,"byte_end":28250,"line_start":770,"line_end":770,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":28255,"byte_end":28258,"line_start":771,"line_end":771,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":28263,"byte_end":28276,"line_start":772,"line_end":772,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":28281,"byte_end":28284,"line_start":773,"line_end":773,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":28289,"byte_end":28296,"line_start":774,"line_end":774,"column_start":5,"column_end":12}},{"value":"/ # use rust_decimal::Decimal;","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":28301,"byte_end":28333,"line_start":775,"line_end":775,"column_start":5,"column_end":37}},{"value":"/ #","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":28338,"byte_end":28343,"line_start":776,"line_end":776,"column_start":5,"column_end":10}},{"value":"/ let mut one = Decimal::ONE;","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":28348,"byte_end":28379,"line_start":777,"line_end":777,"column_start":5,"column_end":36}},{"value":"/ one.set_sign_negative(true);","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":28384,"byte_end":28416,"line_start":778,"line_end":778,"column_start":5,"column_end":37}},{"value":"/ assert_eq!(one.to_string(), \"-1\");","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":28421,"byte_end":28459,"line_start":779,"line_end":779,"column_start":5,"column_end":43}},{"value":"/ ```","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":28464,"byte_end":28471,"line_start":780,"line_end":780,"column_start":5,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":28476,"byte_end":28493,"line_start":781,"line_end":781,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":183},"span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":29073,"byte_end":29082,"line_start":804,"line_end":804,"column_start":12,"column_end":21},"name":"set_scale","qualname":"<Decimal>::set_scale","value":"pub fn set_scale(&mut Self, u32) -> Result<(), Error>","parent":null,"children":[],"decl_id":null,"docs":" An optimized method for changing the scale of a decimal number.","sig":null,"attributes":[{"value":"/ An optimized method for changing the scale of a decimal number.","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":28606,"byte_end":28673,"line_start":786,"line_end":786,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":28678,"byte_end":28681,"line_start":787,"line_end":787,"column_start":5,"column_end":8}},{"value":"/ # Arguments","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":28686,"byte_end":28701,"line_start":788,"line_end":788,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":28706,"byte_end":28709,"line_start":789,"line_end":789,"column_start":5,"column_end":8}},{"value":"/ * `scale`: the new scale of the number","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":28714,"byte_end":28756,"line_start":790,"line_end":790,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":28761,"byte_end":28764,"line_start":791,"line_end":791,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":28769,"byte_end":28782,"line_start":792,"line_end":792,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":28787,"byte_end":28790,"line_start":793,"line_end":793,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":28795,"byte_end":28802,"line_start":794,"line_end":794,"column_start":5,"column_end":12}},{"value":"/ # use rust_decimal::Decimal;","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":28807,"byte_end":28839,"line_start":795,"line_end":795,"column_start":5,"column_end":37}},{"value":"/ #","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":28844,"byte_end":28849,"line_start":796,"line_end":796,"column_start":5,"column_end":10}},{"value":"/ # fn main() -> Result<(), rust_decimal::Error> {","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":28854,"byte_end":28906,"line_start":797,"line_end":797,"column_start":5,"column_end":57}},{"value":"/ let mut one = Decimal::ONE;","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":28911,"byte_end":28942,"line_start":798,"line_end":798,"column_start":5,"column_end":36}},{"value":"/ one.set_scale(5)?;","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":28947,"byte_end":28969,"line_start":799,"line_end":799,"column_start":5,"column_end":27}},{"value":"/ assert_eq!(one.to_string(), \"0.00001\");","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":28974,"byte_end":29017,"line_start":800,"line_end":800,"column_start":5,"column_end":48}},{"value":"/ #    Ok(())","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":29022,"byte_end":29037,"line_start":801,"line_end":801,"column_start":5,"column_end":20}},{"value":"/ # }","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":29042,"byte_end":29049,"line_start":802,"line_end":802,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":29054,"byte_end":29061,"line_start":803,"line_end":803,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":184},"span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":31263,"byte_end":31270,"line_start":855,"line_end":855,"column_start":12,"column_end":19},"name":"rescale","qualname":"<Decimal>::rescale","value":"pub fn rescale(&mut Self, u32)","parent":null,"children":[],"decl_id":null,"docs":" Modifies the `Decimal` towards the desired scale, attempting to do so without changing the\n underlying number itself.","sig":null,"attributes":[{"value":"/ Modifies the `Decimal` towards the desired scale, attempting to do so without changing the","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":29344,"byte_end":29438,"line_start":812,"line_end":812,"column_start":5,"column_end":99}},{"value":"/ underlying number itself.","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":29443,"byte_end":29472,"line_start":813,"line_end":813,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":29477,"byte_end":29480,"line_start":814,"line_end":814,"column_start":5,"column_end":8}},{"value":"/ Setting the scale to something less then the current `Decimal`s scale will","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":29485,"byte_end":29563,"line_start":815,"line_end":815,"column_start":5,"column_end":83}},{"value":"/ cause the newly created `Decimal` to perform rounding using the `MidpointAwayFromZero` strategy.","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":29568,"byte_end":29668,"line_start":816,"line_end":816,"column_start":5,"column_end":105}},{"value":"/","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":29673,"byte_end":29676,"line_start":817,"line_end":817,"column_start":5,"column_end":8}},{"value":"/ Scales greater than the maximum precision that can be represented by `Decimal` will be","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":29681,"byte_end":29771,"line_start":818,"line_end":818,"column_start":5,"column_end":95}},{"value":"/ automatically rounded to either `Decimal::MAX_PRECISION` or the maximum precision that can","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":29776,"byte_end":29870,"line_start":819,"line_end":819,"column_start":5,"column_end":99}},{"value":"/ be represented with the given mantissa.","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":29875,"byte_end":29918,"line_start":820,"line_end":820,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":29923,"byte_end":29926,"line_start":821,"line_end":821,"column_start":5,"column_end":8}},{"value":"/ # Arguments","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":29931,"byte_end":29946,"line_start":822,"line_end":822,"column_start":5,"column_end":20}},{"value":"/ * `scale`: The desired scale to use for the new `Decimal` number.","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":29951,"byte_end":30020,"line_start":823,"line_end":823,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":30025,"byte_end":30028,"line_start":824,"line_end":824,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":30033,"byte_end":30046,"line_start":825,"line_end":825,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":30051,"byte_end":30054,"line_start":826,"line_end":826,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":30059,"byte_end":30066,"line_start":827,"line_end":827,"column_start":5,"column_end":12}},{"value":"/ # use rust_decimal::prelude::*;","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":30071,"byte_end":30106,"line_start":828,"line_end":828,"column_start":5,"column_end":40}},{"value":"/ use rust_decimal_macros::dec;","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":30111,"byte_end":30144,"line_start":829,"line_end":829,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":30149,"byte_end":30152,"line_start":830,"line_end":830,"column_start":5,"column_end":8}},{"value":"/ // Rescaling to a higher scale preserves the value","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":30157,"byte_end":30211,"line_start":831,"line_end":831,"column_start":5,"column_end":59}},{"value":"/ let mut number = dec!(1.123);","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":30216,"byte_end":30249,"line_start":832,"line_end":832,"column_start":5,"column_end":38}},{"value":"/ assert_eq!(number.scale(), 3);","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":30254,"byte_end":30288,"line_start":833,"line_end":833,"column_start":5,"column_end":39}},{"value":"/ number.rescale(6);","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":30293,"byte_end":30315,"line_start":834,"line_end":834,"column_start":5,"column_end":27}},{"value":"/ assert_eq!(number.to_string(), \"1.123000\");","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":30320,"byte_end":30367,"line_start":835,"line_end":835,"column_start":5,"column_end":52}},{"value":"/ assert_eq!(number.scale(), 6);","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":30372,"byte_end":30406,"line_start":836,"line_end":836,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":30411,"byte_end":30414,"line_start":837,"line_end":837,"column_start":5,"column_end":8}},{"value":"/ // Rescaling to a lower scale forces the number to be rounded","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":30419,"byte_end":30484,"line_start":838,"line_end":838,"column_start":5,"column_end":70}},{"value":"/ let mut number = dec!(1.45);","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":30489,"byte_end":30521,"line_start":839,"line_end":839,"column_start":5,"column_end":37}},{"value":"/ assert_eq!(number.scale(), 2);","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":30526,"byte_end":30560,"line_start":840,"line_end":840,"column_start":5,"column_end":39}},{"value":"/ number.rescale(1);","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":30565,"byte_end":30587,"line_start":841,"line_end":841,"column_start":5,"column_end":27}},{"value":"/ assert_eq!(number.to_string(), \"1.5\");","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":30592,"byte_end":30634,"line_start":842,"line_end":842,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(number.scale(), 1);","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":30639,"byte_end":30673,"line_start":843,"line_end":843,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":30678,"byte_end":30681,"line_start":844,"line_end":844,"column_start":5,"column_end":8}},{"value":"/ // This function never fails. Consequently, if a scale is provided that is unable to be","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":30686,"byte_end":30777,"line_start":845,"line_end":845,"column_start":5,"column_end":96}},{"value":"/ // represented using the given mantissa, then the maximum possible scale is used.","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":30782,"byte_end":30867,"line_start":846,"line_end":846,"column_start":5,"column_end":90}},{"value":"/ let mut number = dec!(11.76470588235294);","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":30872,"byte_end":30917,"line_start":847,"line_end":847,"column_start":5,"column_end":50}},{"value":"/ assert_eq!(number.scale(), 14);","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":30922,"byte_end":30957,"line_start":848,"line_end":848,"column_start":5,"column_end":40}},{"value":"/ number.rescale(28);","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":30962,"byte_end":30985,"line_start":849,"line_end":849,"column_start":5,"column_end":28}},{"value":"/ // A scale of 28 cannot be represented given this mantissa, however it was able to represent","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":30990,"byte_end":31086,"line_start":850,"line_end":850,"column_start":5,"column_end":101}},{"value":"/ // a number with a scale of 27","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":31091,"byte_end":31125,"line_start":851,"line_end":851,"column_start":5,"column_end":39}},{"value":"/ assert_eq!(number.to_string(), \"11.764705882352940000000000000\");","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":31130,"byte_end":31199,"line_start":852,"line_end":852,"column_start":5,"column_end":74}},{"value":"/ assert_eq!(number.scale(), 27);","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":31204,"byte_end":31239,"line_start":853,"line_end":853,"column_start":5,"column_end":40}},{"value":"/ ```","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":31244,"byte_end":31251,"line_start":854,"line_end":854,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":185},"span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":31951,"byte_end":31960,"line_start":873,"line_end":873,"column_start":18,"column_end":27},"name":"serialize","qualname":"<Decimal>::serialize","value":"pub const fn serialize(&Self) -> [u8; ]","parent":null,"children":[],"decl_id":null,"docs":" Returns a serialized version of the decimal number.\n The resulting byte array will have the following representation:","sig":null,"attributes":[{"value":"/ Returns a serialized version of the decimal number.","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":31631,"byte_end":31686,"line_start":865,"line_end":865,"column_start":5,"column_end":60}},{"value":"/ The resulting byte array will have the following representation:","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":31691,"byte_end":31759,"line_start":866,"line_end":866,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":31764,"byte_end":31767,"line_start":867,"line_end":867,"column_start":5,"column_end":8}},{"value":"/ * Bytes 1-4: flags","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":31772,"byte_end":31794,"line_start":868,"line_end":868,"column_start":5,"column_end":27}},{"value":"/ * Bytes 5-8: lo portion of `m`","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":31799,"byte_end":31833,"line_start":869,"line_end":869,"column_start":5,"column_end":39}},{"value":"/ * Bytes 9-12: mid portion of `m`","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":31838,"byte_end":31874,"line_start":870,"line_end":870,"column_start":5,"column_end":41}},{"value":"/ * Bytes 13-16: high portion of `m`","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":31879,"byte_end":31917,"line_start":871,"line_end":871,"column_start":5,"column_end":43}},{"value":"must_use","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":31922,"byte_end":31933,"line_start":872,"line_end":872,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":187},"span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":33088,"byte_end":33099,"line_start":902,"line_end":902,"column_start":12,"column_end":23},"name":"deserialize","qualname":"<Decimal>::deserialize","value":"pub fn deserialize([u8; ]) -> Decimal","parent":null,"children":[],"decl_id":null,"docs":" Deserializes the given bytes into a decimal number.\n The deserialized byte representation must be 16 bytes and adhere to the following convention:","sig":null,"attributes":[{"value":"/ Deserializes the given bytes into a decimal number.","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":32745,"byte_end":32800,"line_start":894,"line_end":894,"column_start":5,"column_end":60}},{"value":"/ The deserialized byte representation must be 16 bytes and adhere to the following convention:","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":32805,"byte_end":32902,"line_start":895,"line_end":895,"column_start":5,"column_end":102}},{"value":"/","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":32907,"byte_end":32910,"line_start":896,"line_end":896,"column_start":5,"column_end":8}},{"value":"/ * Bytes 1-4: flags","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":32915,"byte_end":32937,"line_start":897,"line_end":897,"column_start":5,"column_end":27}},{"value":"/ * Bytes 5-8: lo portion of `m`","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":32942,"byte_end":32976,"line_start":898,"line_end":898,"column_start":5,"column_end":39}},{"value":"/ * Bytes 9-12: mid portion of `m`","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":32981,"byte_end":33017,"line_start":899,"line_end":899,"column_start":5,"column_end":41}},{"value":"/ * Bytes 13-16: high portion of `m`","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":33022,"byte_end":33060,"line_start":900,"line_end":900,"column_start":5,"column_end":43}},{"value":"must_use","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":33065,"byte_end":33076,"line_start":901,"line_end":901,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":189},"span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":34904,"byte_end":34915,"line_start":938,"line_end":938,"column_start":12,"column_end":23},"name":"is_negative","qualname":"<Decimal>::is_negative","value":"pub fn is_negative(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the decimal is negative.\n","sig":null,"attributes":[{"value":"/ Returns `true` if the decimal is negative.","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":34747,"byte_end":34793,"line_start":935,"line_end":935,"column_start":5,"column_end":51}},{"value":"deprecated(since = \"0.6.3\", note = \"please use `is_sign_negative` instead\")","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":34798,"byte_end":34876,"line_start":936,"line_end":936,"column_start":5,"column_end":83}},{"value":"must_use","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":34881,"byte_end":34892,"line_start":937,"line_end":937,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":190},"span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":35133,"byte_end":35144,"line_start":945,"line_end":945,"column_start":12,"column_end":23},"name":"is_positive","qualname":"<Decimal>::is_positive","value":"pub fn is_positive(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the decimal is positive.\n","sig":null,"attributes":[{"value":"/ Returns `true` if the decimal is positive.","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":34976,"byte_end":35022,"line_start":942,"line_end":942,"column_start":5,"column_end":51}},{"value":"deprecated(since = \"0.6.3\", note = \"please use `is_sign_positive` instead\")","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":35027,"byte_end":35105,"line_start":943,"line_end":943,"column_start":5,"column_end":83}},{"value":"must_use","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":35110,"byte_end":35121,"line_start":944,"line_end":944,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":191},"span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":35555,"byte_end":35571,"line_start":960,"line_end":960,"column_start":18,"column_end":34},"name":"is_sign_negative","qualname":"<Decimal>::is_sign_negative","value":"pub const fn is_sign_negative(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the sign bit of the decimal is negative.","sig":null,"attributes":[{"value":"/ Returns `true` if the sign bit of the decimal is negative.","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":35205,"byte_end":35267,"line_start":949,"line_end":949,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":35272,"byte_end":35275,"line_start":950,"line_end":950,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":35280,"byte_end":35293,"line_start":951,"line_end":951,"column_start":5,"column_end":18}},{"value":"/ ```","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":35298,"byte_end":35305,"line_start":952,"line_end":952,"column_start":5,"column_end":12}},{"value":"/ # use rust_decimal::prelude::*;","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":35310,"byte_end":35345,"line_start":953,"line_end":953,"column_start":5,"column_end":40}},{"value":"/ #","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":35350,"byte_end":35355,"line_start":954,"line_end":954,"column_start":5,"column_end":10}},{"value":"/ assert_eq!(true, Decimal::new(-1, 0).is_sign_negative());","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":35360,"byte_end":35421,"line_start":955,"line_end":955,"column_start":5,"column_end":66}},{"value":"/ assert_eq!(false, Decimal::new(1, 0).is_sign_negative());","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":35426,"byte_end":35487,"line_start":956,"line_end":956,"column_start":5,"column_end":66}},{"value":"/ ```","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":35492,"byte_end":35499,"line_start":957,"line_end":957,"column_start":5,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":35504,"byte_end":35521,"line_start":958,"line_end":958,"column_start":5,"column_end":22}},{"value":"must_use","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":35526,"byte_end":35537,"line_start":959,"line_end":959,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":192},"span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":35985,"byte_end":36001,"line_start":975,"line_end":975,"column_start":18,"column_end":34},"name":"is_sign_positive","qualname":"<Decimal>::is_sign_positive","value":"pub const fn is_sign_positive(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the sign bit of the decimal is positive.","sig":null,"attributes":[{"value":"/ Returns `true` if the sign bit of the decimal is positive.","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":35635,"byte_end":35697,"line_start":964,"line_end":964,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":35702,"byte_end":35705,"line_start":965,"line_end":965,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":35710,"byte_end":35723,"line_start":966,"line_end":966,"column_start":5,"column_end":18}},{"value":"/ ```","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":35728,"byte_end":35735,"line_start":967,"line_end":967,"column_start":5,"column_end":12}},{"value":"/ # use rust_decimal::prelude::*;","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":35740,"byte_end":35775,"line_start":968,"line_end":968,"column_start":5,"column_end":40}},{"value":"/ #","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":35780,"byte_end":35785,"line_start":969,"line_end":969,"column_start":5,"column_end":10}},{"value":"/ assert_eq!(false, Decimal::new(-1, 0).is_sign_positive());","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":35790,"byte_end":35852,"line_start":970,"line_end":970,"column_start":5,"column_end":67}},{"value":"/ assert_eq!(true, Decimal::new(1, 0).is_sign_positive());","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":35857,"byte_end":35917,"line_start":971,"line_end":971,"column_start":5,"column_end":65}},{"value":"/ ```","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":35922,"byte_end":35929,"line_start":972,"line_end":972,"column_start":5,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":35934,"byte_end":35951,"line_start":973,"line_end":973,"column_start":5,"column_end":22}},{"value":"must_use","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":35956,"byte_end":35967,"line_start":974,"line_end":974,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":193},"span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":36256,"byte_end":36265,"line_start":982,"line_end":982,"column_start":18,"column_end":27},"name":"min_value","qualname":"<Decimal>::min_value","value":"pub const fn min_value() -> Decimal","parent":null,"children":[],"decl_id":null,"docs":" Returns the minimum possible number that `Decimal` can represent.\n","sig":null,"attributes":[{"value":"/ Returns the minimum possible number that `Decimal` can represent.","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":36066,"byte_end":36135,"line_start":979,"line_end":979,"column_start":5,"column_end":74}},{"value":"deprecated(since = \"1.12.0\", note =\n\"Use the associated constant Decimal::MIN\")","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":36140,"byte_end":36222,"line_start":980,"line_end":980,"column_start":5,"column_end":87}},{"value":"must_use","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":36227,"byte_end":36238,"line_start":981,"line_end":981,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":194},"span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":36494,"byte_end":36503,"line_start":989,"line_end":989,"column_start":18,"column_end":27},"name":"max_value","qualname":"<Decimal>::max_value","value":"pub const fn max_value() -> Decimal","parent":null,"children":[],"decl_id":null,"docs":" Returns the maximum possible number that `Decimal` can represent.\n","sig":null,"attributes":[{"value":"/ Returns the maximum possible number that `Decimal` can represent.","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":36304,"byte_end":36373,"line_start":986,"line_end":986,"column_start":5,"column_end":74}},{"value":"deprecated(since = \"1.12.0\", note =\n\"Use the associated constant Decimal::MAX\")","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":36378,"byte_end":36460,"line_start":987,"line_end":987,"column_start":5,"column_end":87}},{"value":"must_use","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":36465,"byte_end":36476,"line_start":988,"line_end":988,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":195},"span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":36968,"byte_end":36973,"line_start":1007,"line_end":1007,"column_start":12,"column_end":17},"name":"trunc","qualname":"<Decimal>::trunc","value":"pub fn trunc(&Self) -> Decimal","parent":null,"children":[],"decl_id":null,"docs":" Returns a new `Decimal` integral with no fractional portion.\n This is a true truncation whereby no rounding is performed.","sig":null,"attributes":[{"value":"/ Returns a new `Decimal` integral with no fractional portion.","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":36542,"byte_end":36606,"line_start":993,"line_end":993,"column_start":5,"column_end":69}},{"value":"/ This is a true truncation whereby no rounding is performed.","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":36611,"byte_end":36674,"line_start":994,"line_end":994,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":36679,"byte_end":36682,"line_start":995,"line_end":995,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":36687,"byte_end":36700,"line_start":996,"line_end":996,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":36705,"byte_end":36708,"line_start":997,"line_end":997,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":36713,"byte_end":36720,"line_start":998,"line_end":998,"column_start":5,"column_end":12}},{"value":"/ # use rust_decimal::Decimal;","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":36725,"byte_end":36757,"line_start":999,"line_end":999,"column_start":5,"column_end":37}},{"value":"/ #","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":36762,"byte_end":36767,"line_start":1000,"line_end":1000,"column_start":5,"column_end":10}},{"value":"/ let pi = Decimal::new(3141, 3);","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":36772,"byte_end":36807,"line_start":1001,"line_end":1001,"column_start":5,"column_end":40}},{"value":"/ let trunc = Decimal::new(3, 0);","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":36812,"byte_end":36847,"line_start":1002,"line_end":1002,"column_start":5,"column_end":40}},{"value":"/ // note that it returns a decimal","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":36852,"byte_end":36889,"line_start":1003,"line_end":1003,"column_start":5,"column_end":42}},{"value":"/ assert_eq!(pi.trunc(), trunc);","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":36894,"byte_end":36928,"line_start":1004,"line_end":1004,"column_start":5,"column_end":39}},{"value":"/ ```","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":36933,"byte_end":36940,"line_start":1005,"line_end":1005,"column_start":5,"column_end":12}},{"value":"must_use","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":36945,"byte_end":36956,"line_start":1006,"line_end":1006,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":196},"span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":38155,"byte_end":38160,"line_start":1046,"line_end":1046,"column_start":12,"column_end":17},"name":"fract","qualname":"<Decimal>::fract","value":"pub fn fract(&Self) -> Decimal","parent":null,"children":[],"decl_id":null,"docs":" Returns a new `Decimal` representing the fractional portion of the number.","sig":null,"attributes":[{"value":"/ Returns a new `Decimal` representing the fractional portion of the number.","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":37781,"byte_end":37859,"line_start":1033,"line_end":1033,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":37864,"byte_end":37867,"line_start":1034,"line_end":1034,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":37872,"byte_end":37885,"line_start":1035,"line_end":1035,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":37890,"byte_end":37893,"line_start":1036,"line_end":1036,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":37898,"byte_end":37905,"line_start":1037,"line_end":1037,"column_start":5,"column_end":12}},{"value":"/ # use rust_decimal::Decimal;","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":37910,"byte_end":37942,"line_start":1038,"line_end":1038,"column_start":5,"column_end":37}},{"value":"/ #","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":37947,"byte_end":37952,"line_start":1039,"line_end":1039,"column_start":5,"column_end":10}},{"value":"/ let pi = Decimal::new(3141, 3);","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":37957,"byte_end":37992,"line_start":1040,"line_end":1040,"column_start":5,"column_end":40}},{"value":"/ let fract = Decimal::new(141, 3);","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":37997,"byte_end":38034,"line_start":1041,"line_end":1041,"column_start":5,"column_end":42}},{"value":"/ // note that it returns a decimal","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":38039,"byte_end":38076,"line_start":1042,"line_end":1042,"column_start":5,"column_end":42}},{"value":"/ assert_eq!(pi.fract(), fract);","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":38081,"byte_end":38115,"line_start":1043,"line_end":1043,"column_start":5,"column_end":39}},{"value":"/ ```","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":38120,"byte_end":38127,"line_start":1044,"line_end":1044,"column_start":5,"column_end":12}},{"value":"must_use","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":38132,"byte_end":38143,"line_start":1045,"line_end":1045,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":197},"span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":38614,"byte_end":38617,"line_start":1063,"line_end":1063,"column_start":12,"column_end":15},"name":"abs","qualname":"<Decimal>::abs","value":"pub fn abs(&Self) -> Decimal","parent":null,"children":[],"decl_id":null,"docs":" Computes the absolute value of `self`.","sig":null,"attributes":[{"value":"/ Computes the absolute value of `self`.","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":38345,"byte_end":38387,"line_start":1052,"line_end":1052,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":38392,"byte_end":38395,"line_start":1053,"line_end":1053,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":38400,"byte_end":38413,"line_start":1054,"line_end":1054,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":38418,"byte_end":38421,"line_start":1055,"line_end":1055,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":38426,"byte_end":38433,"line_start":1056,"line_end":1056,"column_start":5,"column_end":12}},{"value":"/ # use rust_decimal::Decimal;","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":38438,"byte_end":38470,"line_start":1057,"line_end":1057,"column_start":5,"column_end":37}},{"value":"/ #","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":38475,"byte_end":38480,"line_start":1058,"line_end":1058,"column_start":5,"column_end":10}},{"value":"/ let num = Decimal::new(-3141, 3);","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":38485,"byte_end":38522,"line_start":1059,"line_end":1059,"column_start":5,"column_end":42}},{"value":"/ assert_eq!(num.abs().to_string(), \"3.141\");","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":38527,"byte_end":38574,"line_start":1060,"line_end":1060,"column_start":5,"column_end":52}},{"value":"/ ```","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":38579,"byte_end":38586,"line_start":1061,"line_end":1061,"column_start":5,"column_end":12}},{"value":"must_use","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":38591,"byte_end":38602,"line_start":1062,"line_end":1062,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":198},"span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":39011,"byte_end":39016,"line_start":1080,"line_end":1080,"column_start":12,"column_end":17},"name":"floor","qualname":"<Decimal>::floor","value":"pub fn floor(&Self) -> Decimal","parent":null,"children":[],"decl_id":null,"docs":" Returns the largest integer less than or equal to a number.","sig":null,"attributes":[{"value":"/ Returns the largest integer less than or equal to a number.","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":38724,"byte_end":38787,"line_start":1069,"line_end":1069,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":38792,"byte_end":38795,"line_start":1070,"line_end":1070,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":38800,"byte_end":38813,"line_start":1071,"line_end":1071,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":38818,"byte_end":38821,"line_start":1072,"line_end":1072,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":38826,"byte_end":38833,"line_start":1073,"line_end":1073,"column_start":5,"column_end":12}},{"value":"/ # use rust_decimal::Decimal;","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":38838,"byte_end":38870,"line_start":1074,"line_end":1074,"column_start":5,"column_end":37}},{"value":"/ #","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":38875,"byte_end":38880,"line_start":1075,"line_end":1075,"column_start":5,"column_end":10}},{"value":"/ let num = Decimal::new(3641, 3);","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":38885,"byte_end":38921,"line_start":1076,"line_end":1076,"column_start":5,"column_end":41}},{"value":"/ assert_eq!(num.floor().to_string(), \"3\");","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":38926,"byte_end":38971,"line_start":1077,"line_end":1077,"column_start":5,"column_end":50}},{"value":"/ ```","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":38976,"byte_end":38983,"line_start":1078,"line_end":1078,"column_start":5,"column_end":12}},{"value":"must_use","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":38988,"byte_end":38999,"line_start":1079,"line_end":1079,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":199},"span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":39767,"byte_end":39771,"line_start":1109,"line_end":1109,"column_start":12,"column_end":16},"name":"ceil","qualname":"<Decimal>::ceil","value":"pub fn ceil(&Self) -> Decimal","parent":null,"children":[],"decl_id":null,"docs":" Returns the smallest integer greater than or equal to a number.","sig":null,"attributes":[{"value":"/ Returns the smallest integer greater than or equal to a number.","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":39390,"byte_end":39457,"line_start":1096,"line_end":1096,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":39462,"byte_end":39465,"line_start":1097,"line_end":1097,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":39470,"byte_end":39483,"line_start":1098,"line_end":1098,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":39488,"byte_end":39491,"line_start":1099,"line_end":1099,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":39496,"byte_end":39503,"line_start":1100,"line_end":1100,"column_start":5,"column_end":12}},{"value":"/ # use rust_decimal::Decimal;","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":39508,"byte_end":39540,"line_start":1101,"line_end":1101,"column_start":5,"column_end":37}},{"value":"/ #","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":39545,"byte_end":39550,"line_start":1102,"line_end":1102,"column_start":5,"column_end":10}},{"value":"/ let num = Decimal::new(3141, 3);","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":39555,"byte_end":39591,"line_start":1103,"line_end":1103,"column_start":5,"column_end":41}},{"value":"/ assert_eq!(num.ceil().to_string(), \"4\");","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":39596,"byte_end":39640,"line_start":1104,"line_end":1104,"column_start":5,"column_end":49}},{"value":"/ let num = Decimal::new(3, 0);","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":39645,"byte_end":39678,"line_start":1105,"line_end":1105,"column_start":5,"column_end":38}},{"value":"/ assert_eq!(num.ceil().to_string(), \"3\");","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":39683,"byte_end":39727,"line_start":1106,"line_end":1106,"column_start":5,"column_end":49}},{"value":"/ ```","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":39732,"byte_end":39739,"line_start":1107,"line_end":1107,"column_start":5,"column_end":12}},{"value":"must_use","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":39744,"byte_end":39755,"line_start":1108,"line_end":1108,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":200},"span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":40374,"byte_end":40377,"line_start":1134,"line_end":1134,"column_start":12,"column_end":15},"name":"max","qualname":"<Decimal>::max","value":"pub fn max(Self, Decimal) -> Decimal","parent":null,"children":[],"decl_id":null,"docs":" Returns the maximum of the two numbers.","sig":null,"attributes":[{"value":"/ Returns the maximum of the two numbers.","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":40119,"byte_end":40162,"line_start":1124,"line_end":1124,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":40167,"byte_end":40170,"line_start":1125,"line_end":1125,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":40175,"byte_end":40182,"line_start":1126,"line_end":1126,"column_start":5,"column_end":12}},{"value":"/ # use rust_decimal::Decimal;","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":40187,"byte_end":40219,"line_start":1127,"line_end":1127,"column_start":5,"column_end":37}},{"value":"/ #","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":40224,"byte_end":40229,"line_start":1128,"line_end":1128,"column_start":5,"column_end":10}},{"value":"/ let x = Decimal::new(1, 0);","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":40234,"byte_end":40265,"line_start":1129,"line_end":1129,"column_start":5,"column_end":36}},{"value":"/ let y = Decimal::new(2, 0);","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":40270,"byte_end":40301,"line_start":1130,"line_end":1130,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(y, x.max(y));","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":40306,"byte_end":40334,"line_start":1131,"line_end":1131,"column_start":5,"column_end":33}},{"value":"/ ```","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":40339,"byte_end":40346,"line_start":1132,"line_end":1132,"column_start":5,"column_end":12}},{"value":"must_use","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":40351,"byte_end":40362,"line_start":1133,"line_end":1133,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":201},"span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":40767,"byte_end":40770,"line_start":1152,"line_end":1152,"column_start":12,"column_end":15},"name":"min","qualname":"<Decimal>::min","value":"pub fn min(Self, Decimal) -> Decimal","parent":null,"children":[],"decl_id":null,"docs":" Returns the minimum of the two numbers.","sig":null,"attributes":[{"value":"/ Returns the minimum of the two numbers.","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":40512,"byte_end":40555,"line_start":1142,"line_end":1142,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":40560,"byte_end":40563,"line_start":1143,"line_end":1143,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":40568,"byte_end":40575,"line_start":1144,"line_end":1144,"column_start":5,"column_end":12}},{"value":"/ # use rust_decimal::Decimal;","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":40580,"byte_end":40612,"line_start":1145,"line_end":1145,"column_start":5,"column_end":37}},{"value":"/ #","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":40617,"byte_end":40622,"line_start":1146,"line_end":1146,"column_start":5,"column_end":10}},{"value":"/ let x = Decimal::new(1, 0);","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":40627,"byte_end":40658,"line_start":1147,"line_end":1147,"column_start":5,"column_end":36}},{"value":"/ let y = Decimal::new(2, 0);","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":40663,"byte_end":40694,"line_start":1148,"line_end":1148,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(x, x.min(y));","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":40699,"byte_end":40727,"line_start":1149,"line_end":1149,"column_start":5,"column_end":33}},{"value":"/ ```","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":40732,"byte_end":40739,"line_start":1150,"line_end":1150,"column_start":5,"column_end":12}},{"value":"must_use","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":40744,"byte_end":40755,"line_start":1151,"line_end":1151,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":202},"span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":41295,"byte_end":41304,"line_start":1173,"line_end":1173,"column_start":12,"column_end":21},"name":"normalize","qualname":"<Decimal>::normalize","value":"pub fn normalize(&Self) -> Decimal","parent":null,"children":[],"decl_id":null,"docs":" Strips any trailing zero's from a `Decimal` and converts -0 to 0.","sig":null,"attributes":[{"value":"/ Strips any trailing zero's from a `Decimal` and converts -0 to 0.","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":40905,"byte_end":40974,"line_start":1160,"line_end":1160,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":40979,"byte_end":40982,"line_start":1161,"line_end":1161,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":40987,"byte_end":41000,"line_start":1162,"line_end":1162,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":41005,"byte_end":41008,"line_start":1163,"line_end":1163,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":41013,"byte_end":41020,"line_start":1164,"line_end":1164,"column_start":5,"column_end":12}},{"value":"/ # use rust_decimal::prelude::*;","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":41025,"byte_end":41060,"line_start":1165,"line_end":1165,"column_start":5,"column_end":40}},{"value":"/ # fn main() -> Result<(), rust_decimal::Error> {","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":41065,"byte_end":41117,"line_start":1166,"line_end":1166,"column_start":5,"column_end":57}},{"value":"/ let number = Decimal::from_str(\"3.100\")?;","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":41122,"byte_end":41167,"line_start":1167,"line_end":1167,"column_start":5,"column_end":50}},{"value":"/ assert_eq!(number.normalize().to_string(), \"3.1\");","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":41172,"byte_end":41226,"line_start":1168,"line_end":1168,"column_start":5,"column_end":59}},{"value":"/ # Ok(())","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":41231,"byte_end":41243,"line_start":1169,"line_end":1169,"column_start":5,"column_end":17}},{"value":"/ # }","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":41248,"byte_end":41255,"line_start":1170,"line_end":1170,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":41260,"byte_end":41267,"line_start":1171,"line_end":1171,"column_start":5,"column_end":12}},{"value":"must_use","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":41272,"byte_end":41283,"line_start":1172,"line_end":1172,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":203},"span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":41904,"byte_end":41920,"line_start":1193,"line_end":1193,"column_start":12,"column_end":28},"name":"normalize_assign","qualname":"<Decimal>::normalize_assign","value":"pub fn normalize_assign(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" An in place version of `normalize`. Strips any trailing zero's from a `Decimal` and converts -0 to 0.","sig":null,"attributes":[{"value":"/ An in place version of `normalize`. Strips any trailing zero's from a `Decimal` and converts -0 to 0.","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":41418,"byte_end":41523,"line_start":1179,"line_end":1179,"column_start":5,"column_end":110}},{"value":"/","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":41528,"byte_end":41531,"line_start":1180,"line_end":1180,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":41536,"byte_end":41549,"line_start":1181,"line_end":1181,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":41554,"byte_end":41557,"line_start":1182,"line_end":1182,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":41562,"byte_end":41569,"line_start":1183,"line_end":1183,"column_start":5,"column_end":12}},{"value":"/ # use rust_decimal::prelude::*;","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":41574,"byte_end":41609,"line_start":1184,"line_end":1184,"column_start":5,"column_end":40}},{"value":"/ # fn main() -> Result<(), rust_decimal::Error> {","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":41614,"byte_end":41666,"line_start":1185,"line_end":1185,"column_start":5,"column_end":57}},{"value":"/ let mut number = Decimal::from_str(\"3.100\")?;","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":41671,"byte_end":41720,"line_start":1186,"line_end":1186,"column_start":5,"column_end":54}},{"value":"/ assert_eq!(number.to_string(), \"3.100\");","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":41725,"byte_end":41769,"line_start":1187,"line_end":1187,"column_start":5,"column_end":49}},{"value":"/ number.normalize_assign();","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":41774,"byte_end":41804,"line_start":1188,"line_end":1188,"column_start":5,"column_end":35}},{"value":"/ assert_eq!(number.to_string(), \"3.1\");","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":41809,"byte_end":41851,"line_start":1189,"line_end":1189,"column_start":5,"column_end":47}},{"value":"/ # Ok(())","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":41856,"byte_end":41868,"line_start":1190,"line_end":1190,"column_start":5,"column_end":17}},{"value":"/ # }","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":41873,"byte_end":41880,"line_start":1191,"line_end":1191,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":41885,"byte_end":41892,"line_start":1192,"line_end":1192,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":204},"span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":43128,"byte_end":43133,"line_start":1234,"line_end":1234,"column_start":12,"column_end":17},"name":"round","qualname":"<Decimal>::round","value":"pub fn round(&Self) -> Decimal","parent":null,"children":[],"decl_id":null,"docs":" Returns a new `Decimal` number with no fractional portion (i.e. an integer).\n Rounding currently follows \"Bankers Rounding\" rules. e.g. 6.5 -> 6, 7.5 -> 8","sig":null,"attributes":[{"value":"/ Returns a new `Decimal` number with no fractional portion (i.e. an integer).","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":42577,"byte_end":42657,"line_start":1219,"line_end":1219,"column_start":5,"column_end":85}},{"value":"/ Rounding currently follows \"Bankers Rounding\" rules. e.g. 6.5 -> 6, 7.5 -> 8","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":42662,"byte_end":42742,"line_start":1220,"line_end":1220,"column_start":5,"column_end":85}},{"value":"/","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":42747,"byte_end":42750,"line_start":1221,"line_end":1221,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":42755,"byte_end":42768,"line_start":1222,"line_end":1222,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":42773,"byte_end":42776,"line_start":1223,"line_end":1223,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":42781,"byte_end":42788,"line_start":1224,"line_end":1224,"column_start":5,"column_end":12}},{"value":"/ # use rust_decimal::Decimal;","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":42793,"byte_end":42825,"line_start":1225,"line_end":1225,"column_start":5,"column_end":37}},{"value":"/ #","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":42830,"byte_end":42835,"line_start":1226,"line_end":1226,"column_start":5,"column_end":10}},{"value":"/ // Demonstrating bankers rounding...","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":42840,"byte_end":42880,"line_start":1227,"line_end":1227,"column_start":5,"column_end":45}},{"value":"/ let number_down = Decimal::new(65, 1);","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":42885,"byte_end":42927,"line_start":1228,"line_end":1228,"column_start":5,"column_end":47}},{"value":"/ let number_up   = Decimal::new(75, 1);","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":42932,"byte_end":42974,"line_start":1229,"line_end":1229,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(number_down.round().to_string(), \"6\");","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":42979,"byte_end":43032,"line_start":1230,"line_end":1230,"column_start":5,"column_end":58}},{"value":"/ assert_eq!(number_up.round().to_string(), \"8\");","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":43037,"byte_end":43088,"line_start":1231,"line_end":1231,"column_start":5,"column_end":56}},{"value":"/ ```","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":43093,"byte_end":43100,"line_start":1232,"line_end":1232,"column_start":5,"column_end":12}},{"value":"must_use","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":43105,"byte_end":43116,"line_start":1233,"line_end":1233,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":205},"span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":43847,"byte_end":43869,"line_start":1256,"line_end":1256,"column_start":12,"column_end":34},"name":"round_dp_with_strategy","qualname":"<Decimal>::round_dp_with_strategy","value":"pub fn round_dp_with_strategy(&Self, u32, RoundingStrategy) -> Decimal","parent":null,"children":[],"decl_id":null,"docs":" Returns a new `Decimal` number with the specified number of decimal points for fractional\n portion.\n Rounding is performed using the provided [`RoundingStrategy`]","sig":null,"attributes":[{"value":"/ Returns a new `Decimal` number with the specified number of decimal points for fractional","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":43190,"byte_end":43283,"line_start":1238,"line_end":1238,"column_start":5,"column_end":98}},{"value":"/ portion.","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":43288,"byte_end":43300,"line_start":1239,"line_end":1239,"column_start":5,"column_end":17}},{"value":"/ Rounding is performed using the provided [`RoundingStrategy`]","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":43305,"byte_end":43370,"line_start":1240,"line_end":1240,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":43375,"byte_end":43378,"line_start":1241,"line_end":1241,"column_start":5,"column_end":8}},{"value":"/ # Arguments","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":43383,"byte_end":43398,"line_start":1242,"line_end":1242,"column_start":5,"column_end":20}},{"value":"/ * `dp`: the number of decimal points to round to.","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":43403,"byte_end":43456,"line_start":1243,"line_end":1243,"column_start":5,"column_end":58}},{"value":"/ * `strategy`: the [`RoundingStrategy`] to use.","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":43461,"byte_end":43511,"line_start":1244,"line_end":1244,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":43516,"byte_end":43519,"line_start":1245,"line_end":1245,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":43524,"byte_end":43537,"line_start":1246,"line_end":1246,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":43542,"byte_end":43545,"line_start":1247,"line_end":1247,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":43550,"byte_end":43557,"line_start":1248,"line_end":1248,"column_start":5,"column_end":12}},{"value":"/ # use rust_decimal::{Decimal, RoundingStrategy};","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":43562,"byte_end":43614,"line_start":1249,"line_end":1249,"column_start":5,"column_end":57}},{"value":"/ # use rust_decimal_macros::dec;","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":43619,"byte_end":43654,"line_start":1250,"line_end":1250,"column_start":5,"column_end":40}},{"value":"/ #","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":43659,"byte_end":43664,"line_start":1251,"line_end":1251,"column_start":5,"column_end":10}},{"value":"/ let tax = dec!(3.4395);","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":43669,"byte_end":43696,"line_start":1252,"line_end":1252,"column_start":5,"column_end":32}},{"value":"/ assert_eq!(tax.round_dp_with_strategy(2, RoundingStrategy::MidpointAwayFromZero).to_string(), \"3.44\");","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":43701,"byte_end":43807,"line_start":1253,"line_end":1253,"column_start":5,"column_end":111}},{"value":"/ ```","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":43812,"byte_end":43819,"line_start":1254,"line_end":1254,"column_start":5,"column_end":12}},{"value":"must_use","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":43824,"byte_end":43835,"line_start":1255,"line_end":1255,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":206},"span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":49714,"byte_end":49722,"line_start":1409,"line_end":1409,"column_start":12,"column_end":20},"name":"round_dp","qualname":"<Decimal>::round_dp","value":"pub fn round_dp(&Self, u32) -> Decimal","parent":null,"children":[],"decl_id":null,"docs":" Returns a new `Decimal` number with the specified number of decimal points for fractional portion.\n Rounding currently follows \"Bankers Rounding\" rules. e.g. 6.5 -> 6, 7.5 -> 8","sig":null,"attributes":[{"value":"/ Returns a new `Decimal` number with the specified number of decimal points for fractional portion.","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":49157,"byte_end":49259,"line_start":1393,"line_end":1393,"column_start":5,"column_end":107}},{"value":"/ Rounding currently follows \"Bankers Rounding\" rules. e.g. 6.5 -> 6, 7.5 -> 8","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":49264,"byte_end":49344,"line_start":1394,"line_end":1394,"column_start":5,"column_end":85}},{"value":"/","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":49349,"byte_end":49352,"line_start":1395,"line_end":1395,"column_start":5,"column_end":8}},{"value":"/ # Arguments","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":49357,"byte_end":49372,"line_start":1396,"line_end":1396,"column_start":5,"column_end":20}},{"value":"/ * `dp`: the number of decimal points to round to.","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":49377,"byte_end":49430,"line_start":1397,"line_end":1397,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":49435,"byte_end":49438,"line_start":1398,"line_end":1398,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":49443,"byte_end":49456,"line_start":1399,"line_end":1399,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":49461,"byte_end":49464,"line_start":1400,"line_end":1400,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":49469,"byte_end":49476,"line_start":1401,"line_end":1401,"column_start":5,"column_end":12}},{"value":"/ # use rust_decimal::Decimal;","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":49481,"byte_end":49513,"line_start":1402,"line_end":1402,"column_start":5,"column_end":37}},{"value":"/ # use rust_decimal_macros::dec;","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":49518,"byte_end":49553,"line_start":1403,"line_end":1403,"column_start":5,"column_end":40}},{"value":"/ #","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":49558,"byte_end":49563,"line_start":1404,"line_end":1404,"column_start":5,"column_end":10}},{"value":"/ let pi = dec!(3.1415926535897932384626433832);","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":49568,"byte_end":49618,"line_start":1405,"line_end":1405,"column_start":5,"column_end":55}},{"value":"/ assert_eq!(pi.round_dp(2).to_string(), \"3.14\");","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":49623,"byte_end":49674,"line_start":1406,"line_end":1406,"column_start":5,"column_end":56}},{"value":"/ ```","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":49679,"byte_end":49686,"line_start":1407,"line_end":1407,"column_start":5,"column_end":12}},{"value":"must_use","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":49691,"byte_end":49702,"line_start":1408,"line_end":1408,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":207},"span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":51528,"byte_end":51536,"line_start":1450,"line_end":1450,"column_start":12,"column_end":20},"name":"round_sf","qualname":"<Decimal>::round_sf","value":"pub fn round_sf(&Self, u32) -> Option<Decimal>","parent":null,"children":[],"decl_id":null,"docs":" Returns `Some(Decimal)` number rounded to the specified number of significant digits. If\n the resulting number is unable to be represented by the `Decimal` number then `None` will\n be returned.\n When the number of significant figures of the `Decimal` being rounded is greater than the requested\n number of significant digits then rounding will be performed using `MidpointNearestEven` strategy.","sig":null,"attributes":[{"value":"/ Returns `Some(Decimal)` number rounded to the specified number of significant digits. If","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":49842,"byte_end":49934,"line_start":1413,"line_end":1413,"column_start":5,"column_end":97}},{"value":"/ the resulting number is unable to be represented by the `Decimal` number then `None` will","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":49939,"byte_end":50032,"line_start":1414,"line_end":1414,"column_start":5,"column_end":98}},{"value":"/ be returned.","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":50037,"byte_end":50053,"line_start":1415,"line_end":1415,"column_start":5,"column_end":21}},{"value":"/ When the number of significant figures of the `Decimal` being rounded is greater than the requested","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":50058,"byte_end":50161,"line_start":1416,"line_end":1416,"column_start":5,"column_end":108}},{"value":"/ number of significant digits then rounding will be performed using `MidpointNearestEven` strategy.","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":50166,"byte_end":50268,"line_start":1417,"line_end":1417,"column_start":5,"column_end":107}},{"value":"/","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":50273,"byte_end":50276,"line_start":1418,"line_end":1418,"column_start":5,"column_end":8}},{"value":"/ # Arguments","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":50281,"byte_end":50296,"line_start":1419,"line_end":1419,"column_start":5,"column_end":20}},{"value":"/ * `digits`: the number of significant digits to round to.","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":50301,"byte_end":50362,"line_start":1420,"line_end":1420,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":50367,"byte_end":50370,"line_start":1421,"line_end":1421,"column_start":5,"column_end":8}},{"value":"/ # Remarks","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":50375,"byte_end":50388,"line_start":1422,"line_end":1422,"column_start":5,"column_end":18}},{"value":"/ A significant figure is determined using the following rules:","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":50393,"byte_end":50458,"line_start":1423,"line_end":1423,"column_start":5,"column_end":70}},{"value":"/ 1. Non-zero digits are always significant.","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":50463,"byte_end":50509,"line_start":1424,"line_end":1424,"column_start":5,"column_end":51}},{"value":"/ 2. Zeros between non-zero digits are always significant.","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":50514,"byte_end":50574,"line_start":1425,"line_end":1425,"column_start":5,"column_end":65}},{"value":"/ 3. Leading zeros are never significant.","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":50579,"byte_end":50622,"line_start":1426,"line_end":1426,"column_start":5,"column_end":48}},{"value":"/ 4. Trailing zeros are only significant if the number contains a decimal point.","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":50627,"byte_end":50709,"line_start":1427,"line_end":1427,"column_start":5,"column_end":87}},{"value":"/","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":50714,"byte_end":50717,"line_start":1428,"line_end":1428,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":50722,"byte_end":50735,"line_start":1429,"line_end":1429,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":50740,"byte_end":50743,"line_start":1430,"line_end":1430,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":50748,"byte_end":50755,"line_start":1431,"line_end":1431,"column_start":5,"column_end":12}},{"value":"/ # use rust_decimal::Decimal;","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":50760,"byte_end":50792,"line_start":1432,"line_end":1432,"column_start":5,"column_end":37}},{"value":"/ use rust_decimal_macros::dec;","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":50797,"byte_end":50830,"line_start":1433,"line_end":1433,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":50835,"byte_end":50838,"line_start":1434,"line_end":1434,"column_start":5,"column_end":8}},{"value":"/ let value = dec!(305.459);","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":50843,"byte_end":50873,"line_start":1435,"line_end":1435,"column_start":5,"column_end":35}},{"value":"/ assert_eq!(value.round_sf(0), Some(dec!(0)));","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":50878,"byte_end":50927,"line_start":1436,"line_end":1436,"column_start":5,"column_end":54}},{"value":"/ assert_eq!(value.round_sf(1), Some(dec!(300)));","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":50932,"byte_end":50983,"line_start":1437,"line_end":1437,"column_start":5,"column_end":56}},{"value":"/ assert_eq!(value.round_sf(2), Some(dec!(310)));","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":50988,"byte_end":51039,"line_start":1438,"line_end":1438,"column_start":5,"column_end":56}},{"value":"/ assert_eq!(value.round_sf(3), Some(dec!(305)));","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":51044,"byte_end":51095,"line_start":1439,"line_end":1439,"column_start":5,"column_end":56}},{"value":"/ assert_eq!(value.round_sf(4), Some(dec!(305.5)));","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":51100,"byte_end":51153,"line_start":1440,"line_end":1440,"column_start":5,"column_end":58}},{"value":"/ assert_eq!(value.round_sf(5), Some(dec!(305.46)));","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":51158,"byte_end":51212,"line_start":1441,"line_end":1441,"column_start":5,"column_end":59}},{"value":"/ assert_eq!(value.round_sf(6), Some(dec!(305.459)));","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":51217,"byte_end":51272,"line_start":1442,"line_end":1442,"column_start":5,"column_end":60}},{"value":"/ assert_eq!(value.round_sf(7), Some(dec!(305.4590)));","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":51277,"byte_end":51333,"line_start":1443,"line_end":1443,"column_start":5,"column_end":61}},{"value":"/ assert_eq!(Decimal::MAX.round_sf(1), None);","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":51338,"byte_end":51385,"line_start":1444,"line_end":1444,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":51390,"byte_end":51393,"line_start":1445,"line_end":1445,"column_start":5,"column_end":8}},{"value":"/ let value = dec!(0.012301);","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":51398,"byte_end":51429,"line_start":1446,"line_end":1446,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(value.round_sf(3), Some(dec!(0.0123)));","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":51434,"byte_end":51488,"line_start":1447,"line_end":1447,"column_start":5,"column_end":59}},{"value":"/ ```","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":51493,"byte_end":51500,"line_start":1448,"line_end":1448,"column_start":5,"column_end":12}},{"value":"must_use","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":51505,"byte_end":51516,"line_start":1449,"line_end":1449,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":208},"span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":53887,"byte_end":53909,"line_start":1492,"line_end":1492,"column_start":12,"column_end":34},"name":"round_sf_with_strategy","qualname":"<Decimal>::round_sf_with_strategy","value":"pub fn round_sf_with_strategy(&Self, u32, RoundingStrategy) -> Option<Decimal>","parent":null,"children":[],"decl_id":null,"docs":" Returns `Some(Decimal)` number rounded to the specified number of significant digits. If\n the resulting number is unable to be represented by the `Decimal` number then `None` will\n be returned.\n When the number of significant figures of the `Decimal` being rounded is greater than the requested\n number of significant digits then rounding will be performed using the provided [RoundingStrategy].","sig":null,"attributes":[{"value":"/ Returns `Some(Decimal)` number rounded to the specified number of significant digits. If","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":51672,"byte_end":51764,"line_start":1454,"line_end":1454,"column_start":5,"column_end":97}},{"value":"/ the resulting number is unable to be represented by the `Decimal` number then `None` will","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":51769,"byte_end":51862,"line_start":1455,"line_end":1455,"column_start":5,"column_end":98}},{"value":"/ be returned.","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":51867,"byte_end":51883,"line_start":1456,"line_end":1456,"column_start":5,"column_end":21}},{"value":"/ When the number of significant figures of the `Decimal` being rounded is greater than the requested","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":51888,"byte_end":51991,"line_start":1457,"line_end":1457,"column_start":5,"column_end":108}},{"value":"/ number of significant digits then rounding will be performed using the provided [RoundingStrategy].","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":51996,"byte_end":52099,"line_start":1458,"line_end":1458,"column_start":5,"column_end":108}},{"value":"/","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":52104,"byte_end":52107,"line_start":1459,"line_end":1459,"column_start":5,"column_end":8}},{"value":"/ # Arguments","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":52112,"byte_end":52127,"line_start":1460,"line_end":1460,"column_start":5,"column_end":20}},{"value":"/ * `digits`: the number of significant digits to round to.","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":52132,"byte_end":52193,"line_start":1461,"line_end":1461,"column_start":5,"column_end":66}},{"value":"/ * `strategy`: if required, the rounding strategy to use.","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":52198,"byte_end":52258,"line_start":1462,"line_end":1462,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":52263,"byte_end":52266,"line_start":1463,"line_end":1463,"column_start":5,"column_end":8}},{"value":"/ # Remarks","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":52271,"byte_end":52284,"line_start":1464,"line_end":1464,"column_start":5,"column_end":18}},{"value":"/ A significant figure is determined using the following rules:","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":52289,"byte_end":52354,"line_start":1465,"line_end":1465,"column_start":5,"column_end":70}},{"value":"/ 1. Non-zero digits are always significant.","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":52359,"byte_end":52405,"line_start":1466,"line_end":1466,"column_start":5,"column_end":51}},{"value":"/ 2. Zeros between non-zero digits are always significant.","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":52410,"byte_end":52470,"line_start":1467,"line_end":1467,"column_start":5,"column_end":65}},{"value":"/ 3. Leading zeros are never significant.","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":52475,"byte_end":52518,"line_start":1468,"line_end":1468,"column_start":5,"column_end":48}},{"value":"/ 4. Trailing zeros are only significant if the number contains a decimal point.","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":52523,"byte_end":52605,"line_start":1469,"line_end":1469,"column_start":5,"column_end":87}},{"value":"/","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":52610,"byte_end":52613,"line_start":1470,"line_end":1470,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":52618,"byte_end":52631,"line_start":1471,"line_end":1471,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":52636,"byte_end":52639,"line_start":1472,"line_end":1472,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":52644,"byte_end":52651,"line_start":1473,"line_end":1473,"column_start":5,"column_end":12}},{"value":"/ # use rust_decimal::{Decimal, RoundingStrategy};","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":52656,"byte_end":52708,"line_start":1474,"line_end":1474,"column_start":5,"column_end":57}},{"value":"/ use rust_decimal_macros::dec;","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":52713,"byte_end":52746,"line_start":1475,"line_end":1475,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":52751,"byte_end":52754,"line_start":1476,"line_end":1476,"column_start":5,"column_end":8}},{"value":"/ let value = dec!(305.459);","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":52759,"byte_end":52789,"line_start":1477,"line_end":1477,"column_start":5,"column_end":35}},{"value":"/ assert_eq!(value.round_sf_with_strategy(0, RoundingStrategy::ToZero), Some(dec!(0)));","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":52794,"byte_end":52883,"line_start":1478,"line_end":1478,"column_start":5,"column_end":94}},{"value":"/ assert_eq!(value.round_sf_with_strategy(1, RoundingStrategy::ToZero), Some(dec!(300)));","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":52888,"byte_end":52979,"line_start":1479,"line_end":1479,"column_start":5,"column_end":96}},{"value":"/ assert_eq!(value.round_sf_with_strategy(2, RoundingStrategy::ToZero), Some(dec!(300)));","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":52984,"byte_end":53075,"line_start":1480,"line_end":1480,"column_start":5,"column_end":96}},{"value":"/ assert_eq!(value.round_sf_with_strategy(3, RoundingStrategy::ToZero), Some(dec!(305)));","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":53080,"byte_end":53171,"line_start":1481,"line_end":1481,"column_start":5,"column_end":96}},{"value":"/ assert_eq!(value.round_sf_with_strategy(4, RoundingStrategy::ToZero), Some(dec!(305.4)));","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":53176,"byte_end":53269,"line_start":1482,"line_end":1482,"column_start":5,"column_end":98}},{"value":"/ assert_eq!(value.round_sf_with_strategy(5, RoundingStrategy::ToZero), Some(dec!(305.45)));","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":53274,"byte_end":53368,"line_start":1483,"line_end":1483,"column_start":5,"column_end":99}},{"value":"/ assert_eq!(value.round_sf_with_strategy(6, RoundingStrategy::ToZero), Some(dec!(305.459)));","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":53373,"byte_end":53468,"line_start":1484,"line_end":1484,"column_start":5,"column_end":100}},{"value":"/ assert_eq!(value.round_sf_with_strategy(7, RoundingStrategy::ToZero), Some(dec!(305.4590)));","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":53473,"byte_end":53569,"line_start":1485,"line_end":1485,"column_start":5,"column_end":101}},{"value":"/ assert_eq!(Decimal::MAX.round_sf_with_strategy(1, RoundingStrategy::ToZero), Some(dec!(70000000000000000000000000000)));","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":53574,"byte_end":53698,"line_start":1486,"line_end":1486,"column_start":5,"column_end":129}},{"value":"/","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":53703,"byte_end":53706,"line_start":1487,"line_end":1487,"column_start":5,"column_end":8}},{"value":"/ let value = dec!(0.012301);","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":53711,"byte_end":53742,"line_start":1488,"line_end":1488,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(value.round_sf_with_strategy(3, RoundingStrategy::AwayFromZero), Some(dec!(0.0124)));","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":53747,"byte_end":53847,"line_start":1489,"line_end":1489,"column_start":5,"column_end":105}},{"value":"/ ```","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":53852,"byte_end":53859,"line_start":1490,"line_end":1490,"column_start":5,"column_end":12}},{"value":"must_use","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":53864,"byte_end":53875,"line_start":1491,"line_end":1491,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":212},"span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":58745,"byte_end":58751,"line_start":1596,"line_end":1596,"column_start":18,"column_end":24},"name":"unpack","qualname":"<Decimal>::unpack","value":"pub const fn unpack(&Self) -> UnpackedDecimal","parent":null,"children":[],"decl_id":null,"docs":" Convert `Decimal` to an internal representation of the underlying struct. This is useful\n for debugging the internal state of the object.","sig":null,"attributes":[{"value":"/ Convert `Decimal` to an internal representation of the underlying struct. This is useful","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":57929,"byte_end":58021,"line_start":1576,"line_end":1576,"column_start":5,"column_end":97}},{"value":"/ for debugging the internal state of the object.","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":58026,"byte_end":58077,"line_start":1577,"line_end":1577,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":58082,"byte_end":58085,"line_start":1578,"line_end":1578,"column_start":5,"column_end":8}},{"value":"/ # Important Disclaimer","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":58090,"byte_end":58116,"line_start":1579,"line_end":1579,"column_start":5,"column_end":31}},{"value":"/ This is primarily intended for library maintainers. The internal representation of a","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":58121,"byte_end":58209,"line_start":1580,"line_end":1580,"column_start":5,"column_end":93}},{"value":"/ `Decimal` is considered \"unstable\" for public use.","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":58214,"byte_end":58268,"line_start":1581,"line_end":1581,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":58273,"byte_end":58276,"line_start":1582,"line_end":1582,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":58281,"byte_end":58294,"line_start":1583,"line_end":1583,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":58299,"byte_end":58302,"line_start":1584,"line_end":1584,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":58307,"byte_end":58314,"line_start":1585,"line_end":1585,"column_start":5,"column_end":12}},{"value":"/ # use rust_decimal::Decimal;","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":58319,"byte_end":58351,"line_start":1586,"line_end":1586,"column_start":5,"column_end":37}},{"value":"/ use rust_decimal_macros::dec;","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":58356,"byte_end":58389,"line_start":1587,"line_end":1587,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":58394,"byte_end":58397,"line_start":1588,"line_end":1588,"column_start":5,"column_end":8}},{"value":"/ let pi = dec!(3.1415926535897932384626433832);","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":58402,"byte_end":58452,"line_start":1589,"line_end":1589,"column_start":5,"column_end":55}},{"value":"/ assert_eq!(format!(\"{:?}\", pi), \"3.1415926535897932384626433832\");","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":58457,"byte_end":58527,"line_start":1590,"line_end":1590,"column_start":5,"column_end":75}},{"value":"/ assert_eq!(format!(\"{:?}\", pi.unpack()), \"UnpackedDecimal { \\","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":58532,"byte_end":58597,"line_start":1591,"line_end":1591,"column_start":5,"column_end":70}},{"value":"/     negative: false, scale: 28, hi: 1703060790, mid: 185874565, lo: 1102470952 \\","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":58602,"byte_end":58686,"line_start":1592,"line_end":1592,"column_start":5,"column_end":89}},{"value":"/ }\");","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":58691,"byte_end":58699,"line_start":1593,"line_end":1593,"column_start":5,"column_end":13}},{"value":"/ ```","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":58704,"byte_end":58711,"line_start":1594,"line_end":1594,"column_start":5,"column_end":12}},{"value":"must_use","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":58716,"byte_end":58727,"line_start":1595,"line_end":1595,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":221},"span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":60480,"byte_end":60495,"line_start":1653,"line_end":1653,"column_start":12,"column_end":27},"name":"from_f32_retain","qualname":"<Decimal>::from_f32_retain","value":"pub fn from_f32_retain(f32) -> Option<Self>","parent":null,"children":[],"decl_id":null,"docs":" Parses a 32-bit float into a Decimal number whilst retaining any non-guaranteed precision.","sig":null,"attributes":[{"value":"/ Parses a 32-bit float into a Decimal number whilst retaining any non-guaranteed precision.","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":59601,"byte_end":59695,"line_start":1636,"line_end":1636,"column_start":5,"column_end":99}},{"value":"/","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":59700,"byte_end":59703,"line_start":1637,"line_end":1637,"column_start":5,"column_end":8}},{"value":"/ Typically when a float is parsed in Rust Decimal, any excess bits (after ~7.22 decimal points for","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":59708,"byte_end":59809,"line_start":1638,"line_end":1638,"column_start":5,"column_end":106}},{"value":"/ f32 as per IEEE-754) are removed due to any digits following this are considered an approximation","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":59814,"byte_end":59915,"line_start":1639,"line_end":1639,"column_start":5,"column_end":106}},{"value":"/ at best. This function bypasses this additional step and retains these excess bits.","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":59920,"byte_end":60007,"line_start":1640,"line_end":1640,"column_start":5,"column_end":92}},{"value":"/","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":60012,"byte_end":60015,"line_start":1641,"line_end":1641,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":60020,"byte_end":60033,"line_start":1642,"line_end":1642,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":60038,"byte_end":60041,"line_start":1643,"line_end":1643,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":60046,"byte_end":60053,"line_start":1644,"line_end":1644,"column_start":5,"column_end":12}},{"value":"/ # use rust_decimal::prelude::*;","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":60058,"byte_end":60093,"line_start":1645,"line_end":1645,"column_start":5,"column_end":40}},{"value":"/ #","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":60098,"byte_end":60103,"line_start":1646,"line_end":1646,"column_start":5,"column_end":10}},{"value":"/ // Usually floats are parsed leveraging float guarantees. i.e. 0.1_f32 => 0.1","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":60108,"byte_end":60189,"line_start":1647,"line_end":1647,"column_start":5,"column_end":86}},{"value":"/ assert_eq!(\"0.1\", Decimal::from_f32(0.1_f32).unwrap().to_string());","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":60194,"byte_end":60265,"line_start":1648,"line_end":1648,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":60270,"byte_end":60273,"line_start":1649,"line_end":1649,"column_start":5,"column_end":8}},{"value":"/ // Sometimes, we may want to represent the approximation exactly.","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":60278,"byte_end":60347,"line_start":1650,"line_end":1650,"column_start":5,"column_end":74}},{"value":"/ assert_eq!(\"0.100000001490116119384765625\", Decimal::from_f32_retain(0.1_f32).unwrap().to_string());","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":60352,"byte_end":60456,"line_start":1651,"line_end":1651,"column_start":5,"column_end":109}},{"value":"/ ```","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":60461,"byte_end":60468,"line_start":1652,"line_end":1652,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":222},"span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":61441,"byte_end":61456,"line_start":1674,"line_end":1674,"column_start":12,"column_end":27},"name":"from_f64_retain","qualname":"<Decimal>::from_f64_retain","value":"pub fn from_f64_retain(f64) -> Option<Self>","parent":null,"children":[],"decl_id":null,"docs":" Parses a 64-bit float into a Decimal number whilst retaining any non-guaranteed precision.","sig":null,"attributes":[{"value":"/ Parses a 64-bit float into a Decimal number whilst retaining any non-guaranteed precision.","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":60560,"byte_end":60654,"line_start":1657,"line_end":1657,"column_start":5,"column_end":99}},{"value":"/","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":60659,"byte_end":60662,"line_start":1658,"line_end":1658,"column_start":5,"column_end":8}},{"value":"/ Typically when a float is parsed in Rust Decimal, any excess bits (after ~15.95 decimal points for","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":60667,"byte_end":60769,"line_start":1659,"line_end":1659,"column_start":5,"column_end":107}},{"value":"/ f64 as per IEEE-754) are removed due to any digits following this are considered an approximation","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":60774,"byte_end":60875,"line_start":1660,"line_end":1660,"column_start":5,"column_end":106}},{"value":"/ at best. This function bypasses this additional step and retains these excess bits.","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":60880,"byte_end":60967,"line_start":1661,"line_end":1661,"column_start":5,"column_end":92}},{"value":"/","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":60972,"byte_end":60975,"line_start":1662,"line_end":1662,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":60980,"byte_end":60993,"line_start":1663,"line_end":1663,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":60998,"byte_end":61001,"line_start":1664,"line_end":1664,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":61006,"byte_end":61013,"line_start":1665,"line_end":1665,"column_start":5,"column_end":12}},{"value":"/ # use rust_decimal::prelude::*;","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":61018,"byte_end":61053,"line_start":1666,"line_end":1666,"column_start":5,"column_end":40}},{"value":"/ #","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":61058,"byte_end":61063,"line_start":1667,"line_end":1667,"column_start":5,"column_end":10}},{"value":"/ // Usually floats are parsed leveraging float guarantees. i.e. 0.1_f64 => 0.1","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":61068,"byte_end":61149,"line_start":1668,"line_end":1668,"column_start":5,"column_end":86}},{"value":"/ assert_eq!(\"0.1\", Decimal::from_f64(0.1_f64).unwrap().to_string());","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":61154,"byte_end":61225,"line_start":1669,"line_end":1669,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":61230,"byte_end":61233,"line_start":1670,"line_end":1670,"column_start":5,"column_end":8}},{"value":"/ // Sometimes, we may want to represent the approximation exactly.","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":61238,"byte_end":61307,"line_start":1671,"line_end":1671,"column_start":5,"column_end":74}},{"value":"/ assert_eq!(\"0.1000000000000000055511151231\", Decimal::from_f64_retain(0.1_f64).unwrap().to_string());","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":61312,"byte_end":61417,"line_start":1672,"line_end":1672,"column_start":5,"column_end":110}},{"value":"/ ```","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":61422,"byte_end":61429,"line_start":1673,"line_end":1673,"column_start":5,"column_end":12}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1169},"span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/error.rs","byte_start":86785,"byte_end":86796,"line_start":8,"line_end":8,"column_start":5,"column_end":16},"name":"ErrorString","qualname":"::error::Error::ErrorString","value":"Error::ErrorString(String)","parent":{"krate":0,"index":1168},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1172},"span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/error.rs","byte_start":86810,"byte_end":86837,"line_start":9,"line_end":9,"column_start":5,"column_end":32},"name":"ExceedsMaximumPossibleValue","qualname":"::error::Error::ExceedsMaximumPossibleValue","value":"Error::ExceedsMaximumPossibleValue","parent":{"krate":0,"index":1168},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1174},"span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/error.rs","byte_start":86843,"byte_end":86871,"line_start":10,"line_end":10,"column_start":5,"column_end":33},"name":"LessThanMinimumPossibleValue","qualname":"::error::Error::LessThanMinimumPossibleValue","value":"Error::LessThanMinimumPossibleValue","parent":{"krate":0,"index":1168},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1176},"span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/error.rs","byte_start":86877,"byte_end":86886,"line_start":11,"line_end":11,"column_start":5,"column_end":14},"name":"Underflow","qualname":"::error::Error::Underflow","value":"Error::Underflow","parent":{"krate":0,"index":1168},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1178},"span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/error.rs","byte_start":86892,"byte_end":86920,"line_start":12,"line_end":12,"column_start":5,"column_end":33},"name":"ScaleExceedsMaximumPrecision","qualname":"::error::Error::ScaleExceedsMaximumPrecision","value":"Error::ScaleExceedsMaximumPrecision(u32)","parent":{"krate":0,"index":1168},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1181},"span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/error.rs","byte_start":86931,"byte_end":86943,"line_start":13,"line_end":13,"column_start":5,"column_end":17},"name":"ConversionTo","qualname":"::error::Error::ConversionTo","value":"Error::ConversionTo(String)","parent":{"krate":0,"index":1168},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1168},"span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/error.rs","byte_start":86773,"byte_end":86778,"line_start":7,"line_end":7,"column_start":10,"column_end":15},"name":"Error","qualname":"::error::Error","value":"pub enum Error {\n    ErrorString(String),\n    ExceedsMaximumPossibleValue,\n    LessThanMinimumPossibleValue,\n    Underflow,\n    ScaleExceedsMaximumPrecision(u32),\n    ConversionTo(String),\n}","parent":null,"children":[{"krate":0,"index":1169},{"krate":0,"index":1172},{"krate":0,"index":1174},{"krate":0,"index":1176},{"krate":0,"index":1178},{"krate":0,"index":1181}],"decl_id":null,"docs":" Error type for the library.\n","sig":null,"attributes":[{"value":"/ Error type for the library.","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/error.rs","byte_start":86697,"byte_end":86728,"line_start":5,"line_end":5,"column_start":1,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1204},"span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/arithmetic_impls.rs","byte_start":201769,"byte_end":201780,"line_start":78,"line_end":78,"column_start":9,"column_end":20},"name":"checked_add","qualname":"<Decimal>::checked_add","value":"pub fn checked_add(Self, Decimal) -> Option<Decimal>","parent":null,"children":[],"decl_id":null,"docs":"Checked addition. Computes `self + other`, returning `None` if overflow occurred.\n","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/arithmetic_impls.rs","byte_start":200326,"byte_end":200343,"line_start":20,"line_end":20,"column_start":9,"column_end":26}},{"value":"must_use","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/arithmetic_impls.rs","byte_start":200352,"byte_end":200363,"line_start":21,"line_end":21,"column_start":9,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":1205},"span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/arithmetic_impls.rs","byte_start":201808,"byte_end":201822,"line_start":80,"line_end":80,"column_start":9,"column_end":23},"name":"saturating_add","qualname":"<Decimal>::saturating_add","value":"pub fn saturating_add(Self, Decimal) -> Decimal","parent":null,"children":[],"decl_id":null,"docs":"Saturating addition. Computes `self + other`, saturating at the relevant upper or lower boundary.\n","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/arithmetic_impls.rs","byte_start":200942,"byte_end":200959,"line_start":41,"line_end":41,"column_start":9,"column_end":26}},{"value":"must_use","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/arithmetic_impls.rs","byte_start":200968,"byte_end":200979,"line_start":42,"line_end":42,"column_start":9,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":1206},"span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/arithmetic_impls.rs","byte_start":201946,"byte_end":201957,"line_start":86,"line_end":86,"column_start":9,"column_end":20},"name":"checked_mul","qualname":"<Decimal>::checked_mul","value":"pub fn checked_mul(Self, Decimal) -> Option<Decimal>","parent":null,"children":[],"decl_id":null,"docs":"Checked multiplication. Computes `self * other`, returning `None` if overflow occurred.\n","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/arithmetic_impls.rs","byte_start":200326,"byte_end":200343,"line_start":20,"line_end":20,"column_start":9,"column_end":26}},{"value":"must_use","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/arithmetic_impls.rs","byte_start":200352,"byte_end":200363,"line_start":21,"line_end":21,"column_start":9,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":1207},"span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/arithmetic_impls.rs","byte_start":201985,"byte_end":201999,"line_start":88,"line_end":88,"column_start":9,"column_end":23},"name":"saturating_mul","qualname":"<Decimal>::saturating_mul","value":"pub fn saturating_mul(Self, Decimal) -> Decimal","parent":null,"children":[],"decl_id":null,"docs":"Saturating multiplication. Computes `self * other`, saturating at the relevant upper or lower boundary.\n","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/arithmetic_impls.rs","byte_start":200942,"byte_end":200959,"line_start":41,"line_end":41,"column_start":9,"column_end":26}},{"value":"must_use","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/arithmetic_impls.rs","byte_start":200968,"byte_end":200979,"line_start":42,"line_end":42,"column_start":9,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":1208},"span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/arithmetic_impls.rs","byte_start":202111,"byte_end":202122,"line_start":94,"line_end":94,"column_start":9,"column_end":20},"name":"checked_sub","qualname":"<Decimal>::checked_sub","value":"pub fn checked_sub(Self, Decimal) -> Option<Decimal>","parent":null,"children":[],"decl_id":null,"docs":"Checked subtraction. Computes `self - other`, returning `None` if overflow occurred.\n","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/arithmetic_impls.rs","byte_start":200326,"byte_end":200343,"line_start":20,"line_end":20,"column_start":9,"column_end":26}},{"value":"must_use","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/arithmetic_impls.rs","byte_start":200352,"byte_end":200363,"line_start":21,"line_end":21,"column_start":9,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":1209},"span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/arithmetic_impls.rs","byte_start":202150,"byte_end":202164,"line_start":96,"line_end":96,"column_start":9,"column_end":23},"name":"saturating_sub","qualname":"<Decimal>::saturating_sub","value":"pub fn saturating_sub(Self, Decimal) -> Decimal","parent":null,"children":[],"decl_id":null,"docs":"Saturating subtraction. Computes `self - other`, saturating at the relevant upper or lower boundary.\n","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/arithmetic_impls.rs","byte_start":200942,"byte_end":200959,"line_start":41,"line_end":41,"column_start":9,"column_end":26}},{"value":"must_use","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/arithmetic_impls.rs","byte_start":200968,"byte_end":200979,"line_start":42,"line_end":42,"column_start":9,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":1210},"span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/arithmetic_impls.rs","byte_start":202243,"byte_end":202254,"line_start":100,"line_end":100,"column_start":36,"column_end":47},"name":"checked_div","qualname":"<Decimal>::checked_div","value":"pub fn checked_div(Self, Decimal) -> Option<Decimal>","parent":null,"children":[],"decl_id":null,"docs":"Checked division. Computes `self / other`, returning `None` if overflow occurred.\n","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/arithmetic_impls.rs","byte_start":200326,"byte_end":200343,"line_start":20,"line_end":20,"column_start":9,"column_end":26}},{"value":"must_use","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/arithmetic_impls.rs","byte_start":200352,"byte_end":200363,"line_start":21,"line_end":21,"column_start":9,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":1211},"span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/arithmetic_impls.rs","byte_start":202303,"byte_end":202314,"line_start":101,"line_end":101,"column_start":37,"column_end":48},"name":"checked_rem","qualname":"<Decimal>::checked_rem","value":"pub fn checked_rem(Self, Decimal) -> Option<Decimal>","parent":null,"children":[],"decl_id":null,"docs":"Checked remainder. Computes `self % other`, returning `None` if overflow occurred.\n","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/arithmetic_impls.rs","byte_start":200326,"byte_end":200343,"line_start":20,"line_end":20,"column_start":9,"column_end":26}},{"value":"must_use","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/arithmetic_impls.rs","byte_start":200352,"byte_end":200363,"line_start":21,"line_end":21,"column_start":9,"column_end":20}}]},{"kind":"Mod","id":{"krate":0,"index":990},"span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/lib.rs","byte_start":1313,"byte_end":1320,"line_start":55,"line_end":55,"column_start":9,"column_end":16},"name":"prelude","qualname":"::prelude","value":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/lib.rs","parent":null,"children":[{"krate":0,"index":991},{"krate":0,"index":992},{"krate":0,"index":995},{"krate":0,"index":998},{"krate":0,"index":1001},{"krate":0,"index":1002},{"krate":0,"index":1005},{"krate":0,"index":1008},{"krate":0,"index":1011},{"krate":0,"index":1014}],"decl_id":null,"docs":" A convenience module appropriate for glob imports (`use rust_decimal::prelude::*;`).\n","sig":null,"attributes":[{"value":"/ A convenience module appropriate for glob imports (`use rust_decimal::prelude::*;`).","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/lib.rs","byte_start":1216,"byte_end":1304,"line_start":54,"line_end":54,"column_start":1,"column_end":89}}]},{"kind":"Type","id":{"krate":0,"index":1017},"span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/lib.rs","byte_start":1754,"byte_end":1760,"line_start":69,"line_end":69,"column_start":10,"column_end":16},"name":"Result","qualname":"::Result","value":"core::result::Result<T, Error>","parent":null,"children":[],"decl_id":null,"docs":" Shortcut for `core::result::Result<T, rust_decimal::Error>`. Useful to distinguish\n between `rust_decimal` and `std` types.\n","sig":null,"attributes":[{"value":"/ Shortcut for `core::result::Result<T, rust_decimal::Error>`. Useful to distinguish","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/lib.rs","byte_start":1614,"byte_end":1700,"line_start":67,"line_end":67,"column_start":1,"column_end":87}},{"value":"/ between `rust_decimal` and `std` types.","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/lib.rs","byte_start":1701,"byte_end":1744,"line_start":68,"line_end":68,"column_start":1,"column_end":44}}]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":9541,"byte_end":9548,"line_start":161,"line_end":161,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":150},{"krate":0,"index":151},{"krate":0,"index":152},{"krate":0,"index":153},{"krate":0,"index":154},{"krate":0,"index":155},{"krate":0,"index":156},{"krate":0,"index":157},{"krate":0,"index":158},{"krate":0,"index":159},{"krate":0,"index":160},{"krate":0,"index":161},{"krate":0,"index":162},{"krate":0,"index":163},{"krate":0,"index":164},{"krate":0,"index":165},{"krate":0,"index":175},{"krate":0,"index":176},{"krate":0,"index":177},{"krate":0,"index":178},{"krate":0,"index":179},{"krate":0,"index":180},{"krate":0,"index":181},{"krate":0,"index":182},{"krate":0,"index":183},{"krate":0,"index":184},{"krate":0,"index":185},{"krate":0,"index":187},{"krate":0,"index":189},{"krate":0,"index":190},{"krate":0,"index":191},{"krate":0,"index":192},{"krate":0,"index":193},{"krate":0,"index":194},{"krate":0,"index":195},{"krate":0,"index":196},{"krate":0,"index":197},{"krate":0,"index":198},{"krate":0,"index":199},{"krate":0,"index":200},{"krate":0,"index":201},{"krate":0,"index":202},{"krate":0,"index":203},{"krate":0,"index":204},{"krate":0,"index":205},{"krate":0,"index":206},{"krate":0,"index":207},{"krate":0,"index":208},{"krate":0,"index":212},{"krate":0,"index":213},{"krate":0,"index":214},{"krate":0,"index":215},{"krate":0,"index":216},{"krate":0,"index":217},{"krate":0,"index":219},{"krate":0,"index":221},{"krate":0,"index":222}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":61536,"byte_end":61543,"line_start":1679,"line_end":1679,"column_start":18,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":224}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":65603,"byte_end":65610,"line_start":1801,"line_end":1801,"column_start":15,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":237},{"krate":0,"index":238}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":65737,"byte_end":65744,"line_start":1811,"line_end":1811,"column_start":14,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":240}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":65810,"byte_end":65817,"line_start":1817,"line_end":1817,"column_start":17,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":242},{"krate":0,"index":243},{"krate":0,"index":244},{"krate":0,"index":245},{"krate":0,"index":246}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":66449,"byte_end":66456,"line_start":1851,"line_end":1851,"column_start":14,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":248},{"krate":0,"index":249}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":66650,"byte_end":66657,"line_start":1859,"line_end":1859,"column_start":18,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":251},{"krate":0,"index":252}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":66822,"byte_end":66829,"line_start":1867,"line_end":1867,"column_start":24,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":254},{"krate":0,"index":255},{"krate":0,"index":256},{"krate":0,"index":257},{"krate":0,"index":258},{"krate":0,"index":259},{"krate":0,"index":260},{"krate":0,"index":261}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":77762,"byte_end":77769,"line_start":2206,"line_end":2206,"column_start":22,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":267},{"krate":0,"index":268},{"krate":0,"index":269},{"krate":0,"index":270},{"krate":0,"index":271}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":80664,"byte_end":80671,"line_start":2292,"line_end":2292,"column_start":23,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":274}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":81160,"byte_end":81167,"line_start":2304,"line_end":2304,"column_start":21,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":276}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":81307,"byte_end":81314,"line_start":2310,"line_end":2310,"column_start":24,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":278}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":81470,"byte_end":81477,"line_start":2316,"line_end":2316,"column_start":24,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":280}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":81623,"byte_end":81630,"line_start":2322,"line_end":2322,"column_start":14,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":282},{"krate":0,"index":283}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":82087,"byte_end":82094,"line_start":2345,"line_end":2345,"column_start":20,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":289}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":82351,"byte_end":82358,"line_start":2355,"line_end":2355,"column_start":37,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":292}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":82787,"byte_end":82794,"line_start":2373,"line_end":2373,"column_start":20,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":300}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":83051,"byte_end":83058,"line_start":2383,"line_end":2383,"column_start":37,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":303}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Direct","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":83487,"byte_end":83494,"line_start":2401,"line_end":2401,"column_start":20,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":311}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":83751,"byte_end":83758,"line_start":2411,"line_end":2411,"column_start":37,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":314}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":84187,"byte_end":84194,"line_start":2429,"line_end":2429,"column_start":20,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":322}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":84451,"byte_end":84458,"line_start":2439,"line_end":2439,"column_start":37,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":325}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Direct","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":84887,"byte_end":84894,"line_start":2457,"line_end":2457,"column_start":20,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":333}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Direct","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":85151,"byte_end":85158,"line_start":2467,"line_end":2467,"column_start":37,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":336}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Direct","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":85587,"byte_end":85594,"line_start":2485,"line_end":2485,"column_start":20,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":344}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Direct","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":85709,"byte_end":85716,"line_start":2492,"line_end":2492,"column_start":13,"column_end":20},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Direct","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":85735,"byte_end":85742,"line_start":2494,"line_end":2494,"column_start":15,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":347}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Direct","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":85963,"byte_end":85970,"line_start":2504,"line_end":2504,"column_start":21,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":350}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Direct","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":86104,"byte_end":86111,"line_start":2511,"line_end":2511,"column_start":14,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":352}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Direct","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":86220,"byte_end":86227,"line_start":2517,"line_end":2517,"column_start":14,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":354}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Direct","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":86424,"byte_end":86431,"line_start":2527,"line_end":2527,"column_start":31,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":358}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Direct","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/error.rs","byte_start":86976,"byte_end":86981,"line_start":16,"line_end":16,"column_start":21,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":376}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Direct","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/error.rs","byte_start":87260,"byte_end":87265,"line_start":32,"line_end":32,"column_start":28,"column_end":33},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Direct","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/error.rs","byte_start":87292,"byte_end":87297,"line_start":34,"line_end":34,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":380}],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Inherent","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/ops/common.rs","byte_start":116322,"byte_end":116327,"line_start":9,"line_end":9,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":506},{"krate":0,"index":507},{"krate":0,"index":508},{"krate":0,"index":509},{"krate":0,"index":510},{"krate":0,"index":511},{"krate":0,"index":512},{"krate":0,"index":513},{"krate":0,"index":514},{"krate":0,"index":515},{"krate":0,"index":516},{"krate":0,"index":517},{"krate":0,"index":518}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Inherent","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/ops/common.rs","byte_start":121697,"byte_end":121702,"line_start":191,"line_end":191,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":537},{"krate":0,"index":538},{"krate":0,"index":539},{"krate":0,"index":540},{"krate":0,"index":541}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Inherent","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/ops/common.rs","byte_start":122863,"byte_end":122868,"line_start":240,"line_end":240,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":546},{"krate":0,"index":547},{"krate":0,"index":548},{"krate":0,"index":549},{"krate":0,"index":550},{"krate":0,"index":551},{"krate":0,"index":552}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Inherent","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/ops/common.rs","byte_start":123750,"byte_end":123755,"line_start":278,"line_end":278,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":554},{"krate":0,"index":555},{"krate":0,"index":556},{"krate":0,"index":557},{"krate":0,"index":558},{"krate":0,"index":559},{"krate":0,"index":560},{"krate":0,"index":561},{"krate":0,"index":562}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Inherent","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/ops/div.rs","byte_start":129976,"byte_end":129981,"line_start":8,"line_end":8,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":595},{"krate":0,"index":596},{"krate":0,"index":597}],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Inherent","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/ops/div.rs","byte_start":132220,"byte_end":132225,"line_start":75,"line_end":75,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":599},{"krate":0,"index":600}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Inherent","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/arithmetic_impls.rs","byte_start":201684,"byte_end":201691,"line_start":74,"line_end":74,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":1204},{"krate":0,"index":1205},{"krate":0,"index":1206},{"krate":0,"index":1207},{"krate":0,"index":1208},{"krate":0,"index":1209},{"krate":0,"index":1210},{"krate":0,"index":1211}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Direct","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/arithmetic_impls.rs","byte_start":203950,"byte_end":203957,"line_start":166,"line_end":166,"column_start":21,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":898}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Direct","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/arithmetic_impls.rs","byte_start":204103,"byte_end":204110,"line_start":173,"line_end":173,"column_start":21,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":900}],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Direct","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/arithmetic_impls.rs","byte_start":204256,"byte_end":204263,"line_start":180,"line_end":180,"column_start":21,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":902}],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Direct","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/arithmetic_impls.rs","byte_start":204409,"byte_end":204416,"line_start":187,"line_end":187,"column_start":21,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":904}],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Direct","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/arithmetic_impls.rs","byte_start":204562,"byte_end":204569,"line_start":194,"line_end":194,"column_start":21,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":906}],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Direct","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/arithmetic_impls.rs","byte_start":204708,"byte_end":204715,"line_start":201,"line_end":201,"column_start":14,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":908},{"krate":0,"index":909}],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Direct","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/serde.rs","byte_start":212939,"byte_end":212946,"line_start":128,"line_end":128,"column_start":39,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":958}],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Direct","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/serde.rs","byte_start":214008,"byte_end":214022,"line_start":163,"line_end":163,"column_start":39,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":964},{"krate":0,"index":965},{"krate":0,"index":966},{"krate":0,"index":968},{"krate":0,"index":970},{"krate":0,"index":973}],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Direct","span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/serde.rs","byte_start":217891,"byte_end":217898,"line_start":292,"line_end":292,"column_start":27,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":978}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":9541,"byte_end":9548,"line_start":161,"line_end":161,"column_start":6,"column_end":13},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":1034},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":61536,"byte_end":61543,"line_start":1679,"line_end":1679,"column_start":18,"column_end":25},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":1034},"to":{"krate":2,"index":3002}},{"span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":65603,"byte_end":65610,"line_start":1801,"line_end":1801,"column_start":15,"column_end":22},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":1034},"to":{"krate":20,"index":445}},{"span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":65737,"byte_end":65744,"line_start":1811,"line_end":1811,"column_start":14,"column_end":21},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":1034},"to":{"krate":20,"index":455}},{"span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":65810,"byte_end":65817,"line_start":1817,"line_end":1817,"column_start":17,"column_end":24},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":1034},"to":{"krate":20,"index":765}},{"span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":66449,"byte_end":66456,"line_start":1851,"line_end":1851,"column_start":14,"column_end":21},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":1034},"to":{"krate":20,"index":790}},{"span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":66650,"byte_end":66657,"line_start":1859,"line_end":1859,"column_start":18,"column_end":25},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":1034},"to":{"krate":2,"index":12188}},{"span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":66822,"byte_end":66829,"line_start":1867,"line_end":1867,"column_start":24,"column_end":31},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":1034},"to":{"krate":20,"index":316}},{"span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":77762,"byte_end":77769,"line_start":2206,"line_end":2206,"column_start":22,"column_end":29},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":1034},"to":{"krate":20,"index":290}},{"span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":80664,"byte_end":80671,"line_start":2292,"line_end":2292,"column_start":23,"column_end":30},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":1034},"to":{"krate":2,"index":9602}},{"span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":81160,"byte_end":81167,"line_start":2304,"line_end":2304,"column_start":21,"column_end":28},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":1034},"to":{"krate":2,"index":9595}},{"span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":81307,"byte_end":81314,"line_start":2310,"line_end":2310,"column_start":24,"column_end":31},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":1034},"to":{"krate":2,"index":9614}},{"span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":81470,"byte_end":81477,"line_start":2316,"line_end":2316,"column_start":24,"column_end":31},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":1034},"to":{"krate":2,"index":9616}},{"span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":81623,"byte_end":81630,"line_start":2322,"line_end":2322,"column_start":14,"column_end":21},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":1034},"to":{"krate":2,"index":3118}},{"span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":82087,"byte_end":82094,"line_start":2345,"line_end":2345,"column_start":20,"column_end":27},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":1034},"to":{"krate":2,"index":3122}},{"span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":82351,"byte_end":82358,"line_start":2355,"line_end":2355,"column_start":37,"column_end":44},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":1034},"to":{"krate":2,"index":3122}},{"span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":82787,"byte_end":82794,"line_start":2373,"line_end":2373,"column_start":20,"column_end":27},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":1034},"to":{"krate":2,"index":3126}},{"span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":83051,"byte_end":83058,"line_start":2383,"line_end":2383,"column_start":37,"column_end":44},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":1034},"to":{"krate":2,"index":3126}},{"span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":83487,"byte_end":83494,"line_start":2401,"line_end":2401,"column_start":20,"column_end":27},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":1034},"to":{"krate":2,"index":3130}},{"span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":83751,"byte_end":83758,"line_start":2411,"line_end":2411,"column_start":37,"column_end":44},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":1034},"to":{"krate":2,"index":3130}},{"span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":84187,"byte_end":84194,"line_start":2429,"line_end":2429,"column_start":20,"column_end":27},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":1034},"to":{"krate":2,"index":3134}},{"span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":84451,"byte_end":84458,"line_start":2439,"line_end":2439,"column_start":37,"column_end":44},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":1034},"to":{"krate":2,"index":3134}},{"span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":84887,"byte_end":84894,"line_start":2457,"line_end":2457,"column_start":20,"column_end":27},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":1034},"to":{"krate":2,"index":3138}},{"span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":85151,"byte_end":85158,"line_start":2467,"line_end":2467,"column_start":37,"column_end":44},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":1034},"to":{"krate":2,"index":3138}},{"span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":85587,"byte_end":85594,"line_start":2485,"line_end":2485,"column_start":20,"column_end":27},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":1034},"to":{"krate":2,"index":2675}},{"span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":85709,"byte_end":85716,"line_start":2492,"line_end":2492,"column_start":13,"column_end":20},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":1034},"to":{"krate":2,"index":2680}},{"span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":85735,"byte_end":85742,"line_start":2494,"line_end":2494,"column_start":15,"column_end":22},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":1034},"to":{"krate":2,"index":9802}},{"span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":85963,"byte_end":85970,"line_start":2504,"line_end":2504,"column_start":21,"column_end":28},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":1034},"to":{"krate":2,"index":2722}},{"span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":86104,"byte_end":86111,"line_start":2511,"line_end":2511,"column_start":14,"column_end":21},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":1034},"to":{"krate":2,"index":2711}},{"span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":86220,"byte_end":86227,"line_start":2517,"line_end":2517,"column_start":14,"column_end":21},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":1034},"to":{"krate":2,"index":7674}},{"span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/decimal.rs","byte_start":86424,"byte_end":86431,"line_start":2527,"line_end":2527,"column_start":31,"column_end":38},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":1034},"to":{"krate":2,"index":7674}},{"span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/error.rs","byte_start":86976,"byte_end":86981,"line_start":16,"line_end":16,"column_start":21,"column_end":26},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":1168},"to":{"krate":2,"index":2930}},{"span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/error.rs","byte_start":87260,"byte_end":87265,"line_start":32,"line_end":32,"column_start":28,"column_end":33},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":1168},"to":{"krate":1,"index":2452}},{"span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/error.rs","byte_start":87292,"byte_end":87297,"line_start":34,"line_end":34,"column_start":23,"column_end":28},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":1168},"to":{"krate":2,"index":9602}},{"span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/ops/common.rs","byte_start":116322,"byte_end":116327,"line_start":9,"line_end":9,"column_start":6,"column_end":11},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":1192},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/ops/common.rs","byte_start":121697,"byte_end":121702,"line_start":191,"line_end":191,"column_start":6,"column_end":11},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":531},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/ops/common.rs","byte_start":122863,"byte_end":122868,"line_start":240,"line_end":240,"column_start":6,"column_end":11},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":542},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/ops/common.rs","byte_start":123750,"byte_end":123755,"line_start":278,"line_end":278,"column_start":6,"column_end":11},"kind":{"Impl":{"id":51}},"from":{"krate":0,"index":1197},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/ops/div.rs","byte_start":129976,"byte_end":129981,"line_start":8,"line_end":8,"column_start":6,"column_end":11},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":1192},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/ops/div.rs","byte_start":132220,"byte_end":132225,"line_start":75,"line_end":75,"column_start":6,"column_end":11},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":542},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/arithmetic_impls.rs","byte_start":201684,"byte_end":201691,"line_start":74,"line_end":74,"column_start":6,"column_end":13},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":1034},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/arithmetic_impls.rs","byte_start":203950,"byte_end":203957,"line_start":166,"line_end":166,"column_start":21,"column_end":28},"kind":{"Impl":{"id":57}},"from":{"krate":0,"index":1034},"to":{"krate":20,"index":544}},{"span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/arithmetic_impls.rs","byte_start":204103,"byte_end":204110,"line_start":173,"line_end":173,"column_start":21,"column_end":28},"kind":{"Impl":{"id":58}},"from":{"krate":0,"index":1034},"to":{"krate":20,"index":547}},{"span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/arithmetic_impls.rs","byte_start":204256,"byte_end":204263,"line_start":180,"line_end":180,"column_start":21,"column_end":28},"kind":{"Impl":{"id":59}},"from":{"krate":0,"index":1034},"to":{"krate":20,"index":549}},{"span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/arithmetic_impls.rs","byte_start":204409,"byte_end":204416,"line_start":187,"line_end":187,"column_start":21,"column_end":28},"kind":{"Impl":{"id":60}},"from":{"krate":0,"index":1034},"to":{"krate":20,"index":551}},{"span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/arithmetic_impls.rs","byte_start":204562,"byte_end":204569,"line_start":194,"line_end":194,"column_start":21,"column_end":28},"kind":{"Impl":{"id":61}},"from":{"krate":0,"index":1034},"to":{"krate":20,"index":553}},{"span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/arithmetic_impls.rs","byte_start":204708,"byte_end":204715,"line_start":201,"line_end":201,"column_start":14,"column_end":21},"kind":{"Impl":{"id":62}},"from":{"krate":0,"index":1034},"to":{"krate":20,"index":564}},{"span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/serde.rs","byte_start":212939,"byte_end":212946,"line_start":128,"line_end":128,"column_start":39,"column_end":46},"kind":{"Impl":{"id":71}},"from":{"krate":0,"index":1034},"to":{"krate":22,"index":1103}},{"span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/serde.rs","byte_start":214008,"byte_end":214022,"line_start":163,"line_end":163,"column_start":39,"column_end":53},"kind":{"Impl":{"id":72}},"from":{"krate":0,"index":960},"to":{"krate":22,"index":1187}},{"span":{"file_name":"/home/alvorithm/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.23.1/src/serde.rs","byte_start":217891,"byte_end":217898,"line_start":292,"line_end":292,"column_start":27,"column_end":34},"kind":{"Impl":{"id":73}},"from":{"krate":0,"index":1034},"to":{"krate":22,"index":1570}}]}